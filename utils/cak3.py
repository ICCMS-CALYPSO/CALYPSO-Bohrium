#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# This file is part of CALYPSO PACKAGE.
# Spglib is used for finding and handling crystal symmetries.
#
# Author : Li Zhu < zl@calypso.cn >
# Version 2014.05.15
#
# Author : Xuecheng Shao
# Version 2016.10.10 add XRD and TS
# Version 2018.03.30 only for vsc (three elements)
# Version 2018.06.30 add mine and maxe
# Version 2018.07.02 remove same spacegroup and small energy difference structures
# Version 2018.10.19 add split vsc struct.dat --split
#
# Author : Zhenyu Wang <wzy@calypso.cn>
# Version 2022.07.01 update to python3 version with spglib-v1.16.0
# Version 2022.10.12 update to python3 version with spglib-v2.0.1
# Version 2023.04.19 support to plot convexhull and evo by --plotch and --plotevo
#
# Copyright CALYPSO Develop Group

import re
import os
import sys
import math
import time
import glob
import json
import math
from itertools import combinations
from optparse import OptionParser

try:
    import spglib as spg
except:
    print('ERROR: please install spglib.')
    exit(0)
try:
    from pymatgen.entries.computed_entries import GibbsComputedStructureEntry
    from pymatgen.core.structure import Structure
    import pymatgen as mg
except:
    print('ERROR: please install pymatgen')
    exit(0)
try:
    import numpy as np
except:
    print('ERROR: please install numpy.')
    exit(0)


def readinput():
    if os.path.exists('input.dat'):
        finput = 'input.dat'
    elif os.path.exists('../input.dat'):
        finput = '../input.dat'
    else:
        print('Error: no input file: input.dat')
        exit(0)

    f = open(finput, 'r')
    indata = {}
    for line in f:
        if '=' in line:
            if line.strip()[0] != '#':
                litem = line.split('=')
                indata[litem[0].strip().lower()] = litem[1].strip()
    f.close()

    # NameOfAtoms = indata['nameofatoms'].split()
    Npop = int(indata['popsize'])
    try:
        SystemName = indata['systemname']
    except:
        SystemName = 'CALYPSO'
    # print indata['Mol'][0]

    try:
        Mtmp = indata['mol'][0]
        if Mtmp.upper() == 'T':
            Mol = True
        else:
            Mol = False
    except:
        # print 'exce'
        Mol = False

    try:
        H = indata['hardness'][0]
        if H.upper() == 'T':
            Hard = True
        else:
            Hard = False
    except:
        Hard = False

    try:
        vsc = indata['vsc'][0]
        if vsc.upper() == 'T':
            VSC = True
        else:
            VSC = False
    except:
        VSC = False


    try:
        d2 = indata['2d'][0]
        if d2.upper() == 'T':
            D2 = True
        else:
            D2 = False
    except:
        D2 = False

    try:
        cl = indata['cluster'][0]
        if cl.upper() == 'T':
            CL = True
        else:
            CL = False
    except:
        CL = False
    try:
        lsur = indata['lsurface'][0]
        if lsur.upper() == 'T':
            LSUR = True
        else:
            LSUR = False
    except:
        LSUR = False

    if LSUR:
        NameOfAtoms = []
    else:
        NameOfAtoms = indata['nameofatoms'].split()

    try:
        vsce = indata['vscenergy'].split()
        if len(vsce) < len(NameOfAtoms):
            print('VSCEnergy Error.')
            exit(0)
        else:
            VSCE = list(map(float, vsce))
    except:
        VSCE = [0]

    try:
        hm = indata['halfmetal'][0]
        if hm.upper() == 'T':
            HM = True
        else:
            HM = False
    except:
        HM = False

    try:
        bg = indata['bandgapdesign'][0]
        if bg.upper() == 'T':
            BG = True
        else:
            BG = False
    except:
        BG = False
    try:
        xrd = indata['lxrd'][0]
        if xrd.upper() == 'T':
            XRD = True
        else:
            XRD = False
    except:
        XRD = False
    try:
        ts = indata['ltranstate'][0]
        if ts.upper() == 'T':
            TS = True
            num_neb = int(indata['numberofimages'])
        else:
            TS = False
            num_neb=[0]
    except:
        TS = False
        num_neb=[0]
    # print num_neb
    # aaa=raw_input()

    return (SystemName, NameOfAtoms, Npop, Mol, Hard, VSC, VSCE, D2, CL, HM, LSUR, BG, XRD, TS, num_neb)


class PredictG(object):
    
    """
    Created on Tue May 15 14:55:39 2018
    
    @author: Chris
    """
    """
    Designed to take temperature-independent calculated or experimental data as input 
    and return the Gibbs formation energy at some temperature by applying
    a descriptor for the Gibbs energy of compounds
    """
    def __init__(self, 
                 initial_formula,
                 H,
                 path_to_structure, 
                 path_to_masses,
                 path_to_chempots):
        """
        Args:
            initial_formula (str) - chemical formula (can be poorly formatted)
            H (float) - formation enthalpy at 0 or 298 K [eV/atom]
            path_to_structure (str or bool) - path to DFT-optimized geometry file or False if providing volume per atom as float
            path_to_masses (str) - path to .json with {el (str) : atomic mass (float) [amu]}
            path_to_chempots (str) - path to .json with {temperature (str) [K] : {el (str) : G_el(T) (float) [eV/atom]}}
        """
        self.H = H
        self.initial_formula = initial_formula
        self.path_to_structure = path_to_structure
        self.path_to_masses = path_to_masses
        self.path_to_chempots = path_to_chempots
        
    def gcd(self, a, b):
        """
        Args:
            a (int) - a number
            b (int) - another nubmer
        Returns:
            greatest common denominator of a and b (int)
        """
        while b:
            a, b = b, a%b
        return a
    
    @property
    def standardize_formula(self):
        """
        Returns:
            nicely formatted and alphabetized formula (str) 
        e.g., initial_formula = 'O Ti2', good_form = 'O1Ti2'
        e.g., initial_formula = 'CaTiO3', good_form = 'Ca1O3Ti1'
        e.g., initial_formula = 'Al(OH)3', good_form = Al1H3O3
        e.g., initial_formula = '(Al10S)(OH2)3NNe2', good_form = 'Al10H6N1Ne2O3S1'
        NOTE: will not work if element appears twice in initial_formula (e.g., OAl(OH)3)
        """
        initial_formula = self.initial_formula
        if '(' not in initial_formula:
            # close ) ...
            el_num_pairs = re.findall('([A-Z][a-z]\d*)|([A-Z]\d*)', initial_formula)
            el_num_pairs = [[pair[idx] for idx in range(len(pair))if pair[idx] != ''][0] for pair in el_num_pairs]
            el_num_pairs = [pair+'1' if bool(re.search(re.compile('\d'), pair)) == False else pair for pair in el_num_pairs]
            el_num_pairs = sorted(el_num_pairs)
            big_form = ''.join(el_num_pairs)
        else:
            in_parentheses = re.findall('\((.*?)\)', initial_formula)
            after_parentheses = re.findall('\(.*?\)(\d*)', initial_formula)
            in_to_after = dict(zip(in_parentheses, after_parentheses))
            in_to_after = {key : int(in_to_after[key]) if in_to_after[key] != '' else 1 for key in in_to_after}
            final_el_num_pairs = []
            initial_el_num_pairs = []
            for group in in_parentheses:
                multiplier = in_to_after[group]
                el_num_pairs = re.findall('([A-Z][a-z]\d*)|([A-Z]\d*)', group)
                el_num_pairs = [[pair[idx] for idx in range(len(pair))if pair[idx] != ''][0] for pair in el_num_pairs]
                el_num_pairs = [pair+'1' if bool(re.search(re.compile('\d'), pair)) == False else pair for pair in el_num_pairs]
                el_num_pairs = sorted(el_num_pairs)
                initial_el_num_pairs.extend(el_num_pairs)
                multiplied_el_num_pairs = []
                for pair in el_num_pairs:
                    coefficient = re.findall('(\d+)', pair)[0]
                    new_coef = int(coefficient) * multiplier
                    el = re.findall('[A-Z][a-z]?', pair)[0]
                    multiplied_el_num_pairs.append(''.join([el, str(new_coef)]))
                final_el_num_pairs.extend(multiplied_el_num_pairs)
            el_num_pairs = re.findall('([A-Z][a-z]\d*)|([A-Z]\d*)', initial_formula)
            el_num_pairs = [[pair[idx] for idx in range(len(pair))if pair[idx] != ''][0] for pair in el_num_pairs]
            el_num_pairs = [pair+'1' if bool(re.search(re.compile('\d'), pair)) == False else pair for pair in el_num_pairs]
            el_num_pairs = sorted(el_num_pairs)
            final_el_num_pairs.extend([pair for pair in el_num_pairs if pair not in initial_el_num_pairs])
            big_form =  ''.join(sorted(final_el_num_pairs))
        nums = list(map(int, re.findall('\d+', big_form)))
        if (1 not in nums) and (len(nums) > 1):
            names = re.findall('[A-Z][a-z]?', big_form)        
            combos = list(combinations(nums, 2))
            factors = [self.gcd(combo[0], combo[1]) for combo in combos]
            gcf = np.min(factors)
            new_nums = [int(np.round(num/gcf)) for num in nums]        
            el_num_pairs = []
            for idx in range(len(names)):
                el_num_pairs.append(''.join([names[idx], str(new_nums[idx])]))
            el_num_pairs = [str(pair) for pair in el_num_pairs]
            return ''.join(sorted(el_num_pairs))
        else:
            return big_form
        
    @property
    def atom_names(self):
        """
        Returns:
            list of alphabetized elements in formula (str)
        """
        formula = self.standardize_formula
        return re.findall('[A-Z][a-z]?', formula)
    
    @property
    def atom_nums(self):
        """
        Returns:
            list of alphabetized elements in formula (str)
        """    
        formula = self.standardize_formula
        return [int(num) for num in re.findall('\d+', formula)]
    
    @property
    def num_atoms(self):
        """
        Returns:
            number of atoms in formula unit (float)
        """
        return np.sum(self.atom_nums)

    @property
    def mass_d(self):
        """
        Returns:
            {el (str) : atomic mass (float) [amu]} (dict)
        """
        # with open(self.path_to_masses) as f:
        #     return json.load(f)
        return {"H": 1.00794, "He": 4.002602, "Li": 6.941, "Be": 9.012182, "B": 10.811, "C": 12.0107, "N": 14.0067, "O": 15.9994, "F": 18.9984032, "Ne": 20.1797, "Na": 22.98976928, "Mg": 24.305, "Al": 26.9815386, "Si": 28.0855, "P": 30.973762, "S": 32.065, "Cl": 35.453, "Ar": 39.948, "K": 39.0983, "Ca": 40.078, "Sc": 44.955912, "Ti": 47.867, "V": 50.9415, "Cr": 51.9961, "Mn": 54.938045, "Fe": 55.845, "Co": 58.933195, "Ni": 58.6934, "Cu": 63.546, "Zn": 65.409, "Ga": 69.723, "Ge": 72.64, "As": 74.9216, "Se": 78.96, "Br": 79.904, "Kr": 83.798, "Rb": 85.4678, "Sr": 87.62, "Y": 88.90585, "Zr": 91.224, "Nb": 92.90638, "Mo": 95.94, "Tc": 98.0, "Ru": 101.07, "Rh": 102.9055, "Pd": 106.42, "Ag": 107.8682, "Cd": 112.411, "In": 114.818, "Sn": 118.71, "Sb": 121.76, "Te": 127.6, "I": 126.90447, "Xe": 131.293, "Cs": 132.9054519, "Ba": 137.327, "La": 138.90547, "Ce": 140.116, "Pr": 140.90765, "Nd": 144.242, "Pm": 145.0, "Sm": 150.36, "Eu": 151.964, "Gd": 157.25, "Tb": 158.92535, "Dy": 162.5, "Ho": 164.93032, "Er": 167.259, "Tm": 168.93421, "Yb": 173.04, "Lu": 174.967, "Hf": 178.49, "Ta": 180.94788, "W": 183.84, "Re": 186.207, "Os": 190.23, "Ir": 192.217, "Pt": 195.084, "Au": 196.966569, "Hg": 200.59, "Tl": 204.3833, "Pb": 207.2, "Bi": 208.9804, "Po": 210.0, "At": 210.0, "Rn": 220.0, "Fr": 223.0, "Ra": 226.0, "Ac": 227.0, "Th": 232.03806, "Pa": 231.03588, "U": 238.02891, "Np": 237.0, "Pu": 244.0, "Am": 243.0, "Cm": 247.0, "Bk": 247.0, "Cf": 251.0, "Es": 252.0, "Fm": 257.0, "Md": 258.0, "No": 259.0, "Lr": 262.0, "Rf": math.nan, "Db": math.nan, "Sg": math.nan, "Bh": math.nan, "Hs": math.nan, "Mt": math.nan}
    
    @property
    def Gi_d(self):
        """
        Returns:
            {temperature (str) [K] : {el (str) : G_el(T) (float) [eV/atom]}} (dict)
        """        
        # with open(self.path_to_chempots) as f:
        #     return json.load(f)
        return {"300": {"Ag": -0.132696274032233, "Al": -0.08791625641291392, "Am": -0.17225579105560448, "As": -0.11097061719438255, "Au": -0.14768305954293415, "Ba": -0.19425506555423125, "Be": -0.029352749131989427, "Bi": -0.17640773177177801, "Br": -0.23662849147535886, "B": -0.018140643623361145, "Ca": -0.12931025548012645, "Cd": -0.1610623412965746, "Ce": -0.21595584805928383, "Cl": -0.3466398922112246, "Co": -0.09340519251697156, "Cr": -0.07320308856298907, "Cs": -0.26474892470332173, "Cu": -0.10311758304399647, "C": -0.01784733378245323, "Dy": -0.23286728507021817, "Er": -0.22753381354614705, "Eu": -0.2418458827797067, "Fe": -0.08482251127118205, "F": -0.31509561071669173, "Ga": -0.12697828678032855, "Gd": -0.21127325491008966, "Ge": -0.0966606208218894, "Hf": -0.13544177851479505, "Hg": -0.23639529460537906, "Ho": -0.23325801938125099, "H": -0.2029916567342074, "In": -0.17978960460175156, "Ir": -0.11039850754003212, "I": -0.18056122713375136, "K": -0.20107996061563974, "La": -0.17692801989946624, "Li": -0.09043478260869565, "Lu": -0.15845468207493393, "Mg": -0.10158470228532933, "Mn": -0.0995304969684407, "Mo": -0.08894232264082501, "Na": -0.15999067212520082, "Nb": -0.11337824532310721, "Nd": -0.22102917551951082, "Ni": -0.09264445250557081, "Np": -0.15689485412240245, "N": -0.29771467067419805, "Os": -0.10147380421827228, "O": -0.318761465512774, "Pb": -0.20143752914960875, "Pd": -0.1176058454682075, "Pr": -0.22987511012074416, "Pt": -0.12944395501891484, "Pu": -0.16933720267399077, "P": -0.12772140747266414, "Rb": -0.23872726330517696, "Re": -0.11357205783282376, "Rh": -0.09796134114111, "Rn": -0.547627092294139, "Ru": -0.08872467222884386, "Sb": -0.14154220863346634, "Sc": -0.10771829818106442, "Se": -0.1313955537130124, "Si": -0.05851790433746178, "Sm": -0.21608540187593928, "Sn": -0.1591832927398041, "Sr": -0.17317095921645853, "S": -0.09967248795149505, "Ta": -0.12894646836295798, "Tb": -0.22792454785717986, "Tc": -0.10407524485671349, "Te": -0.15304347826086956, "Th": -0.16599989635694667, "Ti": -0.09563973674664455, "Tl": -0.1995636627455045, "Tm": -0.23013525418458827, "U": -0.15637352956418096, "V": -0.0899714981603358, "W": -0.1015505000777323, "Yb": -0.1860340985645437, "Y": -0.13816033580349277, "Zn": -0.12971135409649168, "Zr": -0.12085609162045913}, "400": {"Ag": -0.18107685132404, "Al": -0.1212530445146914, "Am": -0.23386018552106544, "As": -0.15200912058869254, "Au": -0.20104990413017568, "Ba": -0.2637394413639426, "Be": -0.042022075970358085, "Bi": -0.23939368813805256, "Br": -0.3512136601544281, "B": -0.026267295434523504, "Ca": -0.1766689122661554, "Cd": -0.21902990102088407, "Ce": -0.29238845416385967, "Cl": -0.46498678551070116, "Co": -0.12873607296470954, "Cr": -0.10152977146706742, "Cs": -0.36527543141420943, "Cu": -0.14151629787013525, "C": -0.025354200134735973, "Dy": -0.3150603720785614, "Er": -0.30796082292584337, "Eu": -0.32695755816966365, "Fe": -0.11725864123957093, "F": -0.42271959371923096, "Ga": -0.19238534487225992, "Gd": -0.28706431051458775, "Ge": -0.13274705912836193, "Hf": -0.18482043841011558, "Hg": -0.3197077265896253, "Ho": -0.3154697621391926, "H": -0.2730134217754055, "In": -0.24411359278644348, "Ir": -0.15128465564595533, "I": -0.2481447893454941, "K": -0.2777561278955278, "La": -0.2403264756179717, "Li": -0.12471990464839094, "Lu": -0.21562729958024562, "Mg": -0.13956262631497124, "Mn": -0.13710732238171736, "Mo": -0.12254754625071254, "Na": -0.2201948489402498, "Nb": -0.15522205524174743, "Nd": -0.2992309685443333, "Ni": -0.12781157692905631, "Np": -0.21418873400010363, "N": -0.39932165621599214, "Os": -0.1393356480281909, "O": -0.42741876975695703, "Pb": -0.27299062030367416, "Pd": -0.16107063274084055, "Pr": -0.3109954915271804, "Pt": -0.1768243768461419, "Pu": -0.23136860651914803, "P": -0.1762242835673939, "Rb": -0.32984816292687985, "Re": -0.15557444162305023, "Rh": -0.1347328600300565, "Rn": -0.7335492563610924, "Ru": -0.12222417992434056, "Sb": -0.19286935793128465, "Sc": -0.1478157226511893, "Se": -0.17934290304192363, "Si": -0.08140747266414469, "Sm": -0.29312431984246257, "Sn": -0.21672798880655025, "Sr": -0.23530082396227392, "S": -0.13761517334300669, "Ta": -0.17606778255687414, "Tb": -0.308580608384723, "Tc": -0.14275483235736125, "Te": -0.20824998704461833, "Th": -0.2258475410685599, "Ti": -0.1317085557340519, "Tl": -0.2704016168316319, "Tm": -0.311257708452091, "U": -0.21309840907913147, "V": -0.12409286417577862, "W": -0.13938746955485307, "Yb": -0.25238016271959374, "Y": -0.18855884334352488, "Zn": -0.17712390527024927, "Zr": -0.16527957713634245}, "500": {"Ag": -0.23622531999792715, "Al": -0.16131626677721925, "Am": -0.3023817173653936, "As": -0.19967559724309478, "Au": -0.2611566564750998, "Ba": -0.3419712908742291, "Be": -0.0598642276001451, "Bi": -0.30934963984038966, "Br": -0.4860791832927398, "B": -0.038434989894802304, "Ca": -0.2310701145255739, "Cd": -0.28409493703684513, "Ce": -0.37622635642846036, "Cl": -0.5879437218220449, "Co": -0.17107218738664043, "Cr": -0.13640462248017826, "Cs": -0.47418873400010364, "Cu": -0.1865357309426336, "C": -0.03591335440742084, "Dy": -0.40460382442866766, "Er": -0.3958169663678292, "Eu": -0.41931284655645956, "Fe": -0.15677566461107945, "F": -0.5346515002331969, "Ga": -0.26550344613152305, "Gd": -0.3704451469140281, "Ge": -0.1752168730890812, "Hf": -0.24117738508576464, "Hg": -0.410210913613515, "Ho": -0.40496035653210344, "H": -0.34685287868580605, "In": -0.32145203917707416, "Ir": -0.19884541638596673, "I": -0.3625890034720423, "K": -0.3653013421775405, "La": -0.3108908120433228, "Li": -0.16937969632585376, "Lu": -0.2798072239208167, "Mg": -0.18436959112815465, "Mn": -0.18212468259314918, "Mo": -0.16270301083069907, "Na": -0.2936757008861481, "Nb": -0.2036938384204799, "Nd": -0.3849531015183707, "Ni": -0.17026480800124372, "Np": -0.28037518785303417, "N": -0.5047572161475877, "Os": -0.18376535212727366, "O": -0.5400160646732652, "Pb": -0.35177799657977926, "Pd": -0.2115178525159351, "Pr": -0.39952635124630775, "Pt": -0.23111260817743692, "Pu": -0.31179147017671144, "P": -0.2319821733948282, "Rb": -0.43020054930818263, "Re": -0.20434575322589002, "Rh": -0.17831165466134632, "Rn": -0.9249147535886406, "Ru": -0.16211120899621703, "Sb": -0.25097994506918175, "Sc": -0.19477431725138622, "Se": -0.23489868891537546, "Si": -0.11006166761672798, "Sm": -0.37882779706690156, "Sn": -0.2818033891278437, "Sr": -0.3046971031766596, "S": -0.18861688345338654, "Ta": -0.2299497331191377, "Tb": -0.39672384308441727, "Tc": -0.18799917085557338, "Te": -0.2702824273203089, "Th": -0.29318132352179094, "Ti": -0.1747805358345857, "Tl": -0.3484251438047365, "Tm": -0.3994942218997771, "U": -0.27758200756594287, "V": -0.16505881743276157, "W": -0.18374047779447583, "Yb": -0.3259822770378816, "Y": -0.24606622791107427, "Zn": -0.23142353733740997, "Zr": -0.21648235477017153}, "600": {"Ag": -0.2968741255117376, "Al": -0.2069741410581956, "Am": -0.3766875680157537, "As": -0.2527501684199616, "Au": -0.3267274705912836, "Ba": -0.4292200860237343, "Be": -0.08226460071513707, "Bi": -0.39734051925169717, "Br": -0.6248105923200498, "B": -0.054472715966212365, "Ca": -0.2914059180183448, "Cd": -0.3556977768565062, "Ce": -0.4662621132818573, "Cl": -0.7146587552469297, "Co": -0.2192641343213971, "Cr": -0.17672384308441727, "Cs": -0.5896097839042338, "Cu": -0.23696740425972948, "C": -0.04949577654557703, "Dy": -0.5000134735969322, "Er": -0.4896709333056952, "Eu": -0.5174389801523552, "Fe": -0.20240970098979116, "F": -0.6501497642120536, "Ga": -0.3442213815619008, "Gd": -0.4596994351453594, "Ge": -0.22288438617401668, "Hf": -0.30330310410944705, "Hg": -0.5063895942374462, "Ho": -0.500323366326372, "H": -0.4237446235166088, "In": -0.4072788516349692, "Ir": -0.2518370731201741, "I": -0.5094154531792506, "K": -0.45926206146033066, "La": -0.38755350572627867, "Li": -0.22394983676219102, "Lu": -0.3496014924599679, "Mg": -0.23483857594444735, "Mn": -0.23344975902990103, "Mo": -0.20824791418355185, "Na": -0.373534746333627, "Nb": -0.257569570399544, "Nd": -0.47699020573146084, "Ni": -0.2191687827123387, "Np": -0.3597761310048194, "N": -0.6132818572835156, "Os": -0.23350987200082915, "O": -0.6558547960822926, "Pb": -0.43651344768616884, "Pd": -0.26764574804373736, "Pr": -0.49426853915116337, "Pt": -0.29101829299891174, "Pu": -0.40024459760584546, "P": -0.2932341814789864, "Rb": -0.5370700108825206, "Re": -0.2586246566823859, "Rh": -0.22754003212934654, "Rn": -1.1206187490283464, "Ru": -0.20718868217857697, "Sb": -0.3146126340882002, "Sc": -0.2473296367310981, "Se": -0.30858268124578947, "Si": -0.14357257604809037, "Sm": -0.47208270715655287, "Sn": -0.366784474270612, "Sr": -0.3800932787479919, "S": -0.24753795926828004, "Ta": -0.2893330569518578, "Tb": -0.49083277193346114, "Tc": -0.23865160387625017, "Te": -0.33783696947712083, "Th": -0.36675027206301497, "Ti": -0.22367310980981497, "Tl": -0.435165051562419, "Tm": -0.4934134839612375, "U": -0.3487329636731098, "V": -0.2116380784577914, "W": -0.23338550033683994, "Yb": -0.4059563662745504, "Y": -0.30937244131212105, "Zn": -0.2914370109343421, "Zr": -0.27322796289578694}, "700": {"Ag": -0.36219515986940976, "Al": -0.25747007306835257, "Am": -0.4560626004042079, "As": -0.31042338187283, "Au": -0.396918692024667, "Ba": -0.5236254340052858, "Be": -0.10870083432657926, "Bi": -0.4999264134321397, "Br": -0.766777737472146, "B": -0.07409649168264497, "Ca": -0.357003679328393, "Cd": -0.44258485774990936, "Ce": -0.5617070010882521, "Cl": -0.8445437114577395, "Co": -0.27259055811784216, "Cr": -0.2217339482821164, "Cs": -0.7104130175674975, "Cu": -0.2919904648390942, "C": -0.0659812406073483, "Dy": -0.6003586049645022, "Er": -0.5885899362595222, "Eu": -0.6203648235477017, "Fe": -0.2535782764160232, "F": -0.7686946157433798, "Ga": -0.4275690521842774, "Gd": -0.5540011400735866, "Ge": -0.274926672539773, "Hf": -0.3703912525262994, "Hg": -0.6745908690470022, "Ho": -0.6006011297092813, "H": -0.5031808053065243, "In": -0.49819557444162305, "Ir": -0.30943877286624866, "I": -0.6595071772814427, "K": -0.5584598642276002, "La": -0.4693942063533192, "Li": -0.28365238119915015, "Lu": -0.42412188423070946, "Mg": -0.29019640358604964, "Mn": -0.29030108306990726, "Mo": -0.2583800590765404, "Na": -0.45856247085039126, "Nb": -0.31602632533554437, "Nd": -0.5745898326164689, "Ni": -0.27407265378038037, "Np": -0.45167642638752137, "N": -0.7244214126548169, "Os": -0.28774109965279576, "O": -0.7744742706120121, "Pb": -0.5346012333523346, "Pd": -0.3285899362595222, "Pr": -0.5944768616883453, "Pt": -0.3556905218427735, "Pu": -0.4959475566150179, "P": -0.3590547753536819, "Rb": -0.6492978183137276, "Re": -0.3175799347048764, "Rh": -0.28164896097839043, "Rn": -1.3199295227237393, "Ru": -0.2566813494325543, "Sb": -0.38295486345027724, "Sc": -0.30465253666373016, "Se": -0.3882323677255532, "Si": -0.18126859097269007, "Sm": -0.5721003264756179, "Sn": -0.45750738456754936, "Sr": -0.46065916981914284, "S": -0.3124931336477173, "Ta": -0.3533658081567083, "Tb": -0.5901290356013889, "Tc": -0.29394620925532466, "Te": -0.4101031248380578, "Th": -0.44572420583510386, "Ti": -0.2775156760118153, "Tl": -0.5329947660258071, "Tm": -0.5921189822252163, "U": -0.42591076333108774, "V": -0.26298699279680776, "W": -0.2875058299217495, "Yb": -0.4911830854536975, "Y": -0.37762346478727266, "Zn": -0.3572099290045085, "Zr": -0.33470487640565894}, "800": {"Ag": -0.43160698554179405, "Al": -0.3122868839716018, "Am": -0.5400103643053324, "As": -0.3721158729336166, "Au": -0.47113126392703525, "Ba": -0.6242265637145671, "Be": -0.1387635383738405, "Bi": -0.6067637456599472, "Br": -0.9115266621754676, "B": -0.09701611649479194, "Ca": -0.42848629320619785, "Cd": -0.5338860962843965, "Ce": -0.6620200031092917, "Cl": -0.9771663989221122, "Co": -0.33111157174690364, "Cr": -0.2709073949318547, "Cs": -0.8358138570762295, "Cu": -0.35101829299891174, "C": -0.08521013629061512, "Dy": -0.7050018137534332, "Er": -0.6919282790070995, "Eu": -0.7274001140073586, "Fe": -0.30996113385500335, "F": -0.8898989480230087, "Ga": -0.5148696688604446, "Gd": -0.6527522412810282, "Ge": -0.3307674768098668, "Hf": -0.44185935637663887, "Hg": -0.8756791211069077, "Ho": -0.70511582111209, "H": -0.5848048919521169, "In": -0.5934590869047002, "Ir": -0.3710794424003731, "I": -0.8124019277607919, "K": -0.6620946261076851, "La": -0.5555402394154532, "Li": -0.347673731668135, "Lu": -0.5027651966626937, "Mg": -0.3499010208840752, "Mn": -0.3521138000725501, "Mo": -0.3125159351194486, "Na": -0.5479359485930455, "Nb": -0.3784681556718661, "Nd": -0.6772555319479712, "Ni": -0.3336632637197492, "Np": -0.5494221899777167, "N": -0.8378462973519201, "Os": -0.3458713789708245, "O": -0.8955402394154531, "Pb": -0.6372441312121055, "Pd": -0.39373788671814275, "Pr": -0.6996496864797637, "Pt": -0.42452194641654145, "Pu": -0.5981416800538943, "P": -0.4287868580608385, "Rb": -0.7660848836606726, "Re": -0.3806197854588796, "Rh": -0.34009016945639214, "Rn": -1.522328859408198, "Ru": -0.3100409390060631, "Sb": -0.45547079856972583, "Sc": -0.3661688345338654, "Se": -0.47287661294501737, "Si": -0.22264600715137067, "Sm": -0.6783023267865471, "Sn": -0.5524651500233196, "Sr": -0.5458060838472302, "S": -0.38235477017152925, "Ta": -0.4214292377053428, "Tb": -0.694084054516246, "Tc": -0.35334093382391046, "Te": -0.5063958128206457, "Th": -0.5295175415867751, "Ti": -0.3356646110794424, "Tl": -0.6352376016997461, "Tm": -0.6950344613152303, "U": -0.5087319272425765, "V": -0.3185013214489299, "W": -0.34552106545058814, "Yb": -0.580915168160854, "Y": -0.450223350779914, "Zn": -0.4376680313002021, "Zr": -0.400353422811836}, "900": {"Ag": -0.5046857024407939, "Al": -0.37107322381717367, "Am": -0.6281639633103592, "As": -0.43739545006995906, "Au": -0.5489143390164274, "Ba": -0.7301321448929886, "Be": -0.17212623723894904, "Bi": -0.7172430947815722, "Br": -1.0587168989998446, "B": -0.1229631548945432, "Ca": -0.5045758408042701, "Cd": -0.6290459656941494, "Ce": -0.7668031300202104, "Cl": -1.1121982691610095, "Co": -0.3938664041042649, "Cr": -0.3238607037363321, "Cs": -0.9652319013318131, "Cu": -0.41361558791521996, "C": -0.10700834326579262, "Dy": -0.8134860340985645, "Er": -0.7992174949474011, "Eu": -0.8380276726952377, "Fe": -0.37144012022594186, "F": -1.0134621961963, "Ga": -0.6056215992123128, "Gd": -0.7555050007773229, "Ge": -0.38998289889620147, "Hf": -0.5172700419754366, "Hg": -1.0794672747059129, "Ho": -0.8134217754055034, "H": -0.6683531118826761, "In": -0.6925107529667823, "Ir": -0.4363434730787169, "I": -0.9677535368191946, "K": -0.7695952738767684, "La": -0.6456164170596466, "Li": -0.4154552521117272, "Lu": -0.5851023475151578, "Mg": -0.4135658392496243, "Mn": -0.41845675493600043, "Mo": -0.37021195004404833, "Na": -0.6410706327408405, "Nb": -0.44444421412654816, "Nd": -0.7846525366637301, "Ni": -0.3972607141006374, "Np": -0.65550085505519, "N": -0.9533103591231797, "Os": -0.4074602269782868, "O": -1.0187956677203711, "Pb": -0.7437871171684718, "Pd": -0.46263046069337205, "Pr": -0.8094470643105146, "Pt": -0.49706171943825467, "Pu": -0.7062113281857284, "P": -0.5019381250971654, "Rb": -0.886857024407939, "Re": -0.44730061667616733, "Rh": -0.4024470124889879, "Rn": -1.7274270612012228, "Ru": -0.36686635228273823, "Sb": -0.5317956158988444, "Sc": -0.4314681038503394, "Se": -0.561872829973571, "Si": -0.26731409027309944, "Sm": -0.7902451158211121, "Sn": -0.6511177903301031, "Sr": -0.63584598642276, "S": -0.46730372596776704, "Ta": -0.49305695185780174, "Tb": -0.8023008757838006, "Tc": -0.4164294968129761, "Te": -0.6133191687827123, "Th": -0.6176877234803337, "Ti": -0.3976545577032699, "Tl": -0.7413380318184174, "Tm": -0.8017868062393118, "U": -0.5969767321345287, "V": -0.37773850857646263, "W": -0.40699797896046014, "Yb": -0.6746551277400632, "Y": -0.5267222884386175, "Zn": -0.5222024148831425, "Zr": -0.46976524848422035}, "1000": {"Ag": -0.5811131263927035, "Al": -0.4414613670518734, "Am": -0.7198808104886769, "As": -0.5059242369280199, "Au": -0.6299238223558066, "Ba": -0.840545162460486, "Be": -0.20853189614966058, "Bi": -0.8309187956677203, "Br": -1.2080815670829663, "B": -0.15170544644245218, "Ca": -0.5849002435611753, "Cd": -0.7276333108773384, "Ce": -0.8757786184380992, "Cl": -1.2493817691869202, "Co": -0.46061356687568017, "Cr": -0.3803119655905063, "Cs": -1.1354635435559932, "Cu": -0.47944965538684764, "C": -0.13120795978649533, "Dy": -0.9254837539513915, "Er": -0.9101051976991242, "Eu": -0.9518464009949732, "Fe": -0.43812509716536246, "F": -1.1391449448100741, "Ga": -0.6994403275120485, "Gd": -0.8619142871949008, "Ge": -0.4522547546250713, "Hf": -0.596276105094056, "Hg": -1.2856537285588434, "Ho": -0.925226719179147, "H": -0.7536254340052858, "In": -0.794918381095507, "Ir": -0.5049085350054412, "I": -1.1252940871638077, "K": -0.8805513810436856, "La": -0.7393397937503239, "Li": -0.48656889671969733, "Lu": -0.6708213711975954, "Mg": -0.4882945535575478, "Mn": -0.4894667564906462, "Mo": -0.43112504534383583, "Na": -0.7375395139140799, "Nb": -0.5136021143182878, "Nd": -0.896552832046432, "Ni": -0.46447323418147896, "Np": -0.7745556304088719, "N": -1.0706228947504794, "Os": -0.4721656215992123, "O": -1.1440332694201172, "Pb": -0.8537586153288075, "Pd": -0.5349100896512412, "Pr": -0.923622324713686, "Pt": -0.5729564180960771, "Pu": -0.8213152303466861, "P": -0.5781282064569622, "Rb": -1.0328589936259522, "Re": -0.5172804062807691, "Rh": -0.46839197802767274, "Rn": -1.9349256361092397, "Ru": -0.42684769653313986, "Sb": -0.6335513292221588, "Sc": -0.5002414883142458, "Se": -0.6548012644452506, "Si": -0.31496502046950303, "Sm": -0.9075794164896098, "Sn": -0.7530538425662019, "Sr": -0.7295776545577033, "S": -0.6065885888998289, "Ta": -0.5678830906358501, "Tb": -0.914474788827279, "Tc": -0.48289578690988233, "Te": -0.724234855158833, "Th": -0.709895838731409, "Ti": -0.4631694045706587, "Tl": -0.8508680105715914, "Tm": -0.9120671606985542, "U": -0.6922060423900088, "V": -0.4403596413950355, "W": -0.4716018033891278, "Yb": -0.7720143027413587, "Y": -0.6067741099652796, "Zn": -0.6103580867492356, "Zr": -0.542634606415505}, "1100": {"Ag": -0.6606394776390113, "Al": -0.5191304347826087, "Am": -0.8164833912007047, "As": -0.5774348344302224, "Au": -0.7138974970202622, "Ba": -0.9635083173550293, "Be": -0.24776804684666012, "Bi": -0.9474477898118878, "Br": -1.3594076799502515, "B": -0.1830398507540032, "Ca": -0.6693413483961238, "Cd": -0.8890552935689485, "Ce": -0.9932404000621858, "Cl": -1.3885085764626626, "Co": -0.5312058869254288, "Cr": -0.44005493081826186, "Cs": -1.3444659791677462, "Cu": -0.5482624242110172, "C": -0.15764833912007048, "Dy": -1.0407783593304658, "Er": -1.024323988184692, "Eu": -1.0687474737005753, "Fe": -0.5092200860237343, "F": -1.266751826708815, "Ga": -0.7960169974607452, "Gd": -0.9717013007203192, "Ge": -0.5173498471264963, "Hf": -0.6786018552106545, "Hg": -1.4939980307819867, "Ho": -1.0403378763538373, "H": -0.840465875524693, "In": -0.9003451313675701, "Ir": -0.5765196662693683, "I": -1.284810074104783, "K": -1.0408871845364565, "La": -0.8364916826449706, "Li": -0.5606767891382081, "Lu": -0.7596901072705602, "Mg": -0.5687671658807069, "Mn": -0.5662590039902575, "Mo": -0.49498574908016785, "Na": -0.8370233715085246, "Nb": -0.585660983572576, "Nd": -1.012803026377157, "Ni": -0.535015805565632, "Np": -0.8990309374514173, "N": -1.1896305125148987, "Os": -0.5397160180338912, "O": -1.2710799606156398, "Pb": -0.9667824014095455, "Pd": -0.6102938280561745, "Pr": -1.0429393169922785, "Pt": -0.651926206146033, "Pu": -0.9412136601544282, "P": -0.6570513551329222, "Rb": -1.2361548427216664, "Re": -0.5902834637508421, "Rh": -0.5376597398559362, "Rn": -2.1445810229569364, "Ru": -0.48973933772088923, "Sb": -0.739476602580712, "Sc": -0.5722547546250712, "Se": -0.7968388868736073, "Si": -0.36534798155153647, "Sm": -1.0300264289785979, "Sn": -0.8579437218220448, "Sr": -0.8302523708348447, "S": -0.7478074312069233, "Ta": -0.6456164170596466, "Tb": -1.030367414624035, "Tc": -0.552487951495051, "Te": -0.8385852723221225, "Th": -0.8058661968181583, "Ti": -0.532015339171892, "Tl": -0.963481370161165, "Tm": -1.025613307768047, "U": -0.7955640773177178, "V": -0.5061035394102711, "W": -0.5390661760895477, "Yb": -0.8741648960978391, "Y": -0.6901010519769912, "Zn": -0.701771259781313, "Zr": -0.6187303725967767}, "1200": {"Ag": -0.7430636886562678, "Al": -0.5997937503238845, "Am": -0.916365238119915, "As": -0.6517054464424522, "Au": -0.8006488055138105, "Ba": -1.090436855469762, "Be": -0.28966056900036274, "Bi": -1.0665564595532984, "Br": -1.512521117272115, "B": -0.21678810177747837, "Ca": -0.7642607659221641, "Cd": -1.0918692024667047, "Ce": -1.118007980515106, "Cl": -1.5294071617349847, "Co": -0.6055749598383169, "Cr": -0.5029320619785459, "Cs": -1.5554251956262632, "Cu": -0.6198538632948126, "C": -0.1861864538529305, "Dy": -1.159242369280199, "Er": -1.1416645074363891, "Eu": -1.1903777789293672, "Fe": -0.5869492667253977, "F": -1.3961196040835364, "Ga": -0.8950987200082915, "Gd": -1.084643208788931, "Ge": -0.5850795460434265, "Hf": -0.7640161683163187, "Hg": -1.7043042960045602, "Ho": -1.1586288024045188, "H": -0.9287479919158418, "In": -1.0085163496916618, "Ir": -0.6509685443333161, "I": -1.446129450173602, "K": -1.2360211431828783, "La": -0.9392371871275328, "Li": -0.6375011659843499, "Lu": -0.8515323625434006, "Mg": -0.6524775871897186, "Mn": -0.6466476654402239, "Mo": -0.5615733015494636, "Na": -0.9634409493703685, "Nb": -0.6603917707415661, "Nd": -1.1352552210188114, "Ni": -0.6086655956884489, "Np": -1.027776338290926, "N": -1.3102046950303157, "Os": -0.6098885837176763, "O": -1.3997927138933512, "Pb": -1.0825506555423121, "Pd": -0.6885484790381925, "Pr": -1.1680416645074363, "Pt": -0.7337409960097424, "Pu": -1.0650982017930248, "P": -0.7489101932942945, "Rb": -1.4414095455252112, "Re": -0.6660869565217391, "Rh": -0.6100295382701975, "Rn": -2.35619733637353, "Ru": -0.5553453904752034, "Sb": -0.8483619215422086, "Sc": -0.6473244545784319, "Se": -0.9531647406332591, "Si": -0.41825672384308443, "Sm": -1.1576224283567393, "Sn": -0.9655169197284551, "Sr": -0.9382080116080219, "S": -0.8907985697258641, "Ta": -0.726018552106545, "Tb": -1.1497963414002177, "Tc": -0.6249997408923667, "Te": -0.9560180338912784, "Th": -0.9053780380370005, "Ti": -0.6053231072187386, "Tl": -1.078897237912629, "Tm": -1.1422013784526093, "U": -0.9048929885474427, "V": -0.5747629165155206, "W": -0.6091703373581386, "Yb": -0.9873286003005648, "Y": -0.7764761361869721, "Zn": -0.8148675959993782, "Zr": -0.7001699746074519}, "1300": {"Ag": -0.8345131367570089, "Al": -0.6832036067782556, "Am": -1.0193625952220553, "As": -0.7285474426076591, "Au": -0.890035756853397, "Ba": -1.2209048038555217, "Be": -0.33406228947504796, "Bi": -1.1880178266051717, "Br": -1.6672752241281026, "B": -0.2527988806550241, "Ca": -0.8634057107322382, "Cd": -1.296480281909105, "Ce": -1.246035134995077, "Cl": -1.6719339793750323, "Co": -0.6837435870860755, "Cr": -0.5688293517127014, "Cs": -1.7681774369072913, "Cu": -0.694084054516246, "C": -0.21669275016841993, "Dy": -1.2808021972327304, "Er": -1.2619629994299633, "Eu": -1.3147867544177851, "Fe": -0.6676250194330725, "F": -1.5271114681038505, "Ga": -0.9964782090480385, "Gd": -1.2005710732238173, "Ge": -0.683588122506089, "Hf": -0.8523273047623984, "Hg": -1.9164066953412449, "Ho": -1.2800259107633312, "H": -1.0183702129864745, "In": -1.1192019484894025, "Ir": -0.7280841581592994, "I": -1.6091117790330103, "K": -1.4329533088044775, "La": -1.0511032803026377, "Li": -0.7168098668186764, "Lu": -0.946218583199461, "Mg": -0.7391542726848733, "Mn": -0.7303674146240349, "Mo": -0.630712545991605, "Na": -1.1534673783489662, "Nb": -0.7376048090376742, "Nd": -1.2629776649220086, "Ni": -0.685239156345546, "Np": -1.16046017515676, "N": -1.4322371353060062, "Os": -0.6824957247240504, "O": -1.5300481940197959, "Pb": -1.2008094522464632, "Pd": -0.7694802300875784, "Pr": -1.3306617608954758, "Pt": -0.8182111208996218, "Pu": -1.1926361610613048, "P": -0.8880427009379697, "Rb": -1.6484593460123336, "Re": -0.744503290666943, "Rh": -0.685311706482873, "Rn": -2.5696118567653, "Ru": -0.6235020987718298, "Sb": -0.95996165207027, "Sc": -0.72530756076074, "Se": -1.1111950044048298, "Si": -0.4735171270145619, "Sm": -1.2919458983261647, "Sn": -1.075551640151319, "Sr": -1.0495755816966368, "S": -1.0354277867025963, "Ta": -0.8088936104057626, "Tb": -1.2726175053117066, "Tc": -0.7002601440638442, "Te": -1.076266777219257, "Th": -1.0082448048919521, "Ti": -0.6837529149608746, "Tl": -1.1968824169560035, "Tm": -1.261646888117324, "U": -1.0175322589003473, "V": -0.6461698709643986, "W": -0.681737057573716, "Yb": -1.1036710369487486, "Y": -0.8657107322381717, "Zn": -1.0124806964813182, "Zr": -0.7853821837591336}, "1400": {"Ag": -0.9318474374255066, "Al": -0.7691475358864072, "Am": -1.127622946572006, "As": -0.8077680468466601, "Au": -0.9881681090324921, "Ba": -1.354569104005804, "Be": -0.38085090946779293, "Bi": -1.3116484427631236, "Br": -1.823548219930559, "B": -0.2909364149867855, "Ca": -0.9653438358294035, "Cd": -1.5027506866352283, "Ce": -1.377072083743587, "Cl": -1.8159682852256829, "Co": -0.7658589418044255, "Cr": -0.6376618127170026, "Cs": -1.9825848577499094, "Cu": -0.7750893921334923, "C": -0.24905114784681556, "Dy": -1.4054236409804632, "Er": -1.3850899103487588, "Eu": -1.4417598590454477, "Fe": -0.7510887702751723, "F": -1.6596113385500337, "Ga": -1.0999771985282687, "Gd": -1.3193543037777893, "Ge": -0.7875918536560087, "Hf": -0.9433725449551744, "Hg": -2.1301694563921854, "Ho": -1.4044960356532101, "H": -1.1092454785717987, "In": -1.2322070788205421, "Ir": -0.8077182981810643, "I": -1.7736394258174846, "K": -1.6315468725708657, "La": -1.1657065865160388, "Li": -0.7984090791314712, "Lu": -1.0436513447686169, "Mg": -0.8598155153650827, "Mn": -0.8178494066435197, "Mo": -0.7022573457014044, "Na": -1.3451531326112869, "Nb": -0.8171446338809141, "Nd": -1.3995667720371043, "Ni": -0.7645862051096026, "Np": -1.296761154583614, "N": -1.555632481732912, "Os": -0.7573830129035602, "O": -1.6617391304347826, "Pb": -1.3213556511374824, "Pd": -0.8529253251800798, "Pr": -1.498128206456962, "Pt": -0.9051728247914184, "Pu": -1.323545628854226, "P": -1.0286604135357829, "Rb": -1.8571674353526453, "Re": -0.8253738923148676, "Rh": -0.76334559776131, "Rn": -2.7846846660102607, "Ru": -0.6940736902109136, "Sb": -1.0740653987666475, "Sc": -0.8060921386744053, "Se": -1.2708068611701302, "Si": -0.5309830543607815, "Sm": -1.4337067938021455, "Sn": -1.1878561434419859, "Sr": -1.1640918277452452, "S": -1.1815815929937294, "Ta": -0.8940767995025134, "Tb": -1.3987200082914442, "Tc": -0.7781250971653624, "Te": -1.257216147587708, "Th": -1.1143099963724932, "Ti": -0.7645903508317355, "Tl": -1.317237912628906, "Tm": -1.3837891900295383, "U": -1.1332269264652537, "V": -0.7201896667875836, "W": -0.7566108721562937, "Yb": -1.222949681297611, "Y": -0.9576452298284707, "Zn": -1.211752085816448, "Zr": -0.8728994144167487}, "1500": {"Ag": -1.0316608799295228, "Al": -0.8574441623050215, "Am": -1.2463336269886511, "As": -0.9567072601958853, "Au": -1.0921252008084157, "Ba": -1.4911488832461004, "Be": -0.4299176037726071, "Bi": -1.4372949163082345, "Br": -1.9812354251956263, "B": -0.3310835881225061, "Ca": -1.0698761465512774, "Cd": -1.7105612271337514, "Ce": -1.510901176348655, "Cl": -1.9614048815878116, "Co": -0.8515271803907344, "Cr": -0.7093703684510546, "Cs": -2.1985334507954604, "Cu": -0.8643447167953568, "C": -0.2831569674042597, "Dy": -1.5331056640928642, "Er": -1.5109415971394518, "Eu": -1.57111364460797, "Fe": -0.837203710421309, "F": -1.7935186816603617, "Ga": -1.205444369591128, "Gd": -1.4408778566616574, "Ge": -0.8936404622480177, "Hf": -1.0370098979115925, "Hg": -2.3454713167849923, "Ho": -1.532031922060424, "H": -1.2013007203192205, "In": -1.3473679846608282, "Ir": -0.8897486655956884, "I": -1.9396144478416335, "K": -1.8316826449707209, "La": -1.2828532932580194, "Li": -0.8821288283152822, "Lu": -1.1437601699746074, "Mg": -1.0478385241229207, "Mn": -0.9107394931854692, "Mo": -0.776088511167539, "Na": -1.5383790226460072, "Nb": -0.8988785821630305, "Nd": -1.53976991242162, "Ni": -0.8465782245944966, "Np": -1.4364201689381768, "N": -1.6803078198683734, "Os": -0.8344136394258175, "O": -1.7947732808208532, "Pb": -1.4440234233300513, "Pd": -0.9387448826242422, "Pr": -1.6687796030471058, "Pt": -0.994488262424211, "Pu": -1.4575851168575427, "P": -1.1706607244649427, "Rb": -2.0674156604653575, "Re": -0.9085660983572577, "Rh": -0.8439871482613879, "Rn": -3.001297611027621, "Ru": -0.7669471938643312, "Sb": -1.1904938591490906, "Sc": -0.8895890552935689, "Se": -1.4318951132300357, "Si": -0.5905259884956211, "Sm": -1.5821495569259472, "Sn": -1.30226874643727, "Sr": -1.2815328807586672, "S": -1.3291630823444058, "Ta": -0.9814219826916101, "Tb": -1.5280261180494379, "Tc": -0.8584681556718661, "Te": -1.4249826397885683, "Th": -1.223438876509302, "Ti": -0.8477265896253303, "Tl": -1.4397947867544179, "Tm": -1.5084894024977977, "U": -1.2585023578794632, "V": -0.7967114059180184, "W": -0.8336632637197492, "Yb": -1.3749287454008394, "Y": -1.052142820127481, "Zn": -1.4125636109239779, "Zr": -0.9625890034720422}, "1600": {"Ag": -1.133789708244805, "Al": -0.9479359485930456, "Am": -1.3729626366792764, "As": -1.1127760791832928, "Au": -1.1982225216354874, "Ba": -1.6304181997201637, "Be": -0.4866207182463595, "Bi": -1.564822511271182, "Br": -2.140245115821112, "B": -0.37313675700886145, "Ca": -1.1768274861377417, "Cd": -1.91980826035135, "Ce": -1.6473368917448308, "Cl": -2.1081541172202933, "Co": -0.9400062185831994, "Cr": -0.7839166709851272, "Cs": -2.415923718712753, "Cu": -0.9558718971860911, "C": -0.3189158936622273, "Dy": -1.6638658858889983, "Er": -1.639438254650982, "Eu": -1.702689537233767, "Fe": -0.9258537596517593, "F": -1.928746437270042, "Ga": -1.3127491319894284, "Gd": -1.567648857335337, "Ge": -1.0015992123127948, "Hf": -1.133118101259263, "Hg": -2.5622107063274084, "Ho": -1.6626542985956367, "H": -1.2944721977509457, "In": -1.4645385293050732, "Ir": -0.9740643623361145, "I": -2.1069549670933303, "K": -2.033258019381251, "La": -1.402371353060061, "Li": -0.9678219412343888, "Lu": -1.2464942737213038, "Mg": -1.237298025599834, "Mn": -1.0136290615121522, "Mo": -0.8521065450588174, "Na": -1.7330424418303363, "Nb": -0.9826947193864332, "Nd": -1.6833466341918435, "Ni": -0.9311043167331711, "Np": -1.5792195678084677, "N": -1.8061880084987303, "Os": -0.9134725605016323, "O": -1.9290703218116807, "Pb": -1.5686738871327148, "Pd": -1.0268217857698088, "Pr": -1.8424014095455252, "Pt": -1.0860382442866767, "Pu": -1.5945452661035395, "P": -1.3139524278385242, "Rb": -2.279103487588744, "Re": -0.9939596828522568, "Rh": -0.9271088770275173, "Rn": -3.2193480851945897, "Ru": -0.8420241488314245, "Sb": -1.3090915686376121, "Sc": -0.9757288697725035, "Se": -1.594364927190755, "Si": -0.6520371042130901, "Sm": -1.7340653987666474, "Sn": -1.4186495310151837, "Sr": -1.401702855366119, "S": -1.4780867492356327, "Ta": -1.0707902782815981, "Tb": -1.6617049282271856, "Tc": -0.9411836036689641, "Te": -1.5942851220396954, "Th": -1.3355153650826552, "Ti": -0.9330756076074002, "Tl": -1.5644058661968183, "Tm": -1.6356262631497123, "U": -1.387478882727885, "V": -0.8756407731771778, "W": -0.9127802249054258, "Yb": -1.5895859460019692, "Y": -1.1490843136238793, "Zn": -1.6148126651811163, "Zr": -1.0543483443022232}, "1700": {"Ag": -1.2380877856661656, "Al": -1.040485049489558, "Am": -1.5023039850754003, "As": -1.2700523397419288, "Au": -1.3063263719749183, "Ba": -1.7721925687930766, "Be": -0.5496160024874333, "Bi": -1.6941120381406436, "Br": -2.300497486655957, "B": -0.41700264289785977, "Ca": -1.286047572161476, "Cd": -2.1304036896926983, "Ce": -1.7862165103383947, "Cl": -2.256136186972068, "Co": -1.031053531637042, "Cr": -0.861276882416956, "Cs": -2.6346696377675287, "Cu": -1.0495279058921076, "C": -0.356241902886459, "Dy": -1.7999803078198684, "Er": -1.7705166606208218, "Eu": -1.8363476188008498, "Fe": -1.016935274913199, "F": -2.0652179095196144, "Ga": -1.4217754055034462, "Gd": -1.7031144737523967, "Ge": -1.11134684147795, "Hf": -1.2315872933616625, "Hg": -2.780297455563041, "Ho": -1.7964015131885784, "H": -1.3887044618334456, "In": -1.5835943410892885, "Ir": -1.0605721096543503, "I": -2.275593097372649, "K": -2.2361848992071307, "La": -1.5241135927864435, "Li": -1.127814686220656, "Lu": -1.3518215266621754, "Mg": -1.4281048867699644, "Mn": -1.1210654505881743, "Mo": -0.9302295693631134, "Na": -1.929053220707882, "Nb": -1.0684987303725968, "Nd": -1.8300865419495258, "Ni": -1.0180680934860342, "Np": -1.7249727936985024, "N": -1.9332056796393222, "Os": -0.9944571695082137, "O": -2.064559776131005, "Pb": -1.6951899258952168, "Pd": -1.1170637922993212, "Pr": -2.01880810488677, "Pt": -1.1797170544644244, "Pu": -1.7342447012488988, "P": -1.4584577913665335, "Rb": -2.4921438565580143, "Re": -1.0814541120381407, "Rh": -1.0125998859926413, "Rn": -3.438745919054776, "Ru": -0.9192268228222004, "Sb": -1.4297248276934238, "Sc": -1.066929574545266, "Se": -1.7581313157485619, "Si": -0.7200487122350624, "Sm": -1.8892345960511996, "Sn": -1.5368730890812043, "Sr": -1.5347131678499248, "S": -1.6282784888842827, "Ta": -1.162067678913821, "Tb": -1.8045012178058764, "Tc": -1.0261771259781314, "Te": -1.7650303155930975, "Th": -1.451563455459398, "Ti": -1.0205710732238171, "Tl": -1.6909415971394517, "Tm": -1.7650940560708919, "U": -1.5196092656889673, "V": -0.9568958905529358, "W": -0.9938632948126651, "Yb": -1.8055905062963153, "Y": -1.248367103694875, "Zn": -1.8184090791314713, "Zr": -1.1480914131730322}, "1800": {"Ag": -1.3444276312380163, "Al": -1.1349722754832359, "Am": -1.6341980618749028, "As": -1.4284640099497332, "Au": -1.416318598745919, "Ba": -1.9163206716069856, "Be": -0.6143866922319532, "Bi": -1.8250608902938281, "Br": -2.4619230968544334, "B": -0.4625972949163082, "Ca": -1.4184609006581335, "Cd": -2.3422656371456703, "Ce": -1.9273949318546926, "Cl": -2.405280613566876, "Co": -1.127550396434679, "Cr": -0.941442711302275, "Cs": -2.854698657822459, "Cu": -1.1451873348188837, "C": -0.3950593356480282, "Dy": -1.9459698398714826, "Er": -1.9047012488987927, "Eu": -2.0767715188889464, "Fe": -1.110360159610302, "F": -2.2028636575633516, "Ga": -1.5324226563714567, "Gd": -1.8408457273151266, "Ge": -1.2227797066901591, "Hf": -1.3323241954707985, "Hg": -2.9996517593408303, "Ho": -1.9402984919935742, "H": -1.4839472456858578, "In": -1.7044245219464165, "Ir": -1.1491879566772036, "I": -2.445471835000259, "K": -2.440381406436234, "La": -1.6479483857594444, "Li": -1.3096647147224958, "Lu": -1.459723273047624, "Mg": -1.6201803389127845, "Mn": -1.23130849354822, "Mo": -1.0103912525262995, "Na": -2.1263315541275847, "Nb": -1.1562108099704618, "Nd": -1.9798010053376174, "Ni": -1.1149670933305695, "Np": -1.8734829248069649, "N": -2.0613022749650205, "Os": -1.0772772969891693, "O": -2.2011779033010312, "Pb": -1.8234710058558325, "Pd": -1.2093962792143857, "Pr": -2.1978369694771205, "Pt": -1.2754324506399959, "Pu": -1.876521739130435, "P": -1.604106337772711, "Rb": -2.706456962222107, "Re": -1.1709571435974504, "Rh": -1.1003534228118361, "Rn": -3.6594113074571175, "Ru": -0.9984951028657304, "Sb": -1.552271337513603, "Sc": -1.1610343576721769, "Se": -1.92311706482873, "Si": -0.816007669585946, "Sm": -2.0474674819920193, "Sn": -1.6568337047209412, "Sr": -1.7433673628025081, "S": -1.779671451520962, "Ta": -1.255160905840286, "Tb": -1.9521376379748148, "Tc": -1.1133637352956418, "Te": -1.9371368606519148, "Th": -1.571035912317977, "Ti": -1.1101622013784527, "Tl": -1.8718173809400425, "Tm": -1.8967984660828108, "U": -1.6547079856972586, "V": -1.0404083536300979, "W": -1.0768264497072084, "Yb": -2.022863657563352, "Y": -1.3513654972275484, "Zn": -2.023273047623983, "Zr": -1.2437508420998082}, "1900": {"Ag": -1.452696274032233, "Al": -1.231287764937555, "Am": -1.7685018396641965, "As": -1.587948903974711, "Au": -1.528095558895165, "Ba": -2.0626812457895007, "Be": -0.6808446908845935, "Bi": -1.9575757889827436, "Br": -2.6244602787998135, "B": -0.5098481629268798, "Ca": -1.6182090480385551, "Cd": -2.5553267347256052, "Ce": -2.0707457117686685, "Cl": -2.555526765818521, "Co": -1.2328258278488884, "Cr": -1.024413121210551, "Cs": -3.075944447323418, "Cu": -1.2427392858993627, "C": -0.43529875110120747, "Dy": -2.0948365030833807, "Er": -2.052137637974815, "Eu": -2.3116525884852566, "Fe": -1.2147059128361921, "F": -2.3416230502150595, "Ga": -1.6446007151370678, "Gd": -1.9807182463595379, "Ge": -1.335803492770897, "Hf": -1.4352438202829456, "Hg": -3.220204176815049, "Ho": -2.090240970098979, "H": -1.5801559827952532, "In": -1.8269285381147329, "Ir": -1.2398362439757475, "I": -2.616541949525833, "K": -2.645780173083899, "La": -1.773759651759341, "Li": -1.4927138933512982, "Lu": -1.5701912214333833, "Mg": -1.8134528683215008, "Mn": -1.3442037622428358, "Mo": -1.0925356272995803, "Na": -2.3248080012437167, "Nb": -1.2457604809037675, "Nd": -2.1323273047623985, "Ni": -1.2173000984609006, "Np": -2.0246152251645335, "N": -2.190424418303363, "Os": -1.1618531377934394, "O": -2.3388702907187646, "Pb": -1.953429030419236, "Pd": -1.311223506244494, "Pr": -2.379339793750324, "Pt": -1.3731025548012643, "Pu": -2.0212323159040264, "P": -1.7508369176555942, "Rb": -2.921976473026896, "Re": -1.2623910452401927, "Rh": -1.1902782815981758, "Rn": -3.8812748095558893, "Ru": -1.0797761310048193, "Sb": -1.6537601699746074, "Sc": -1.2647820904803855, "Se": -2.089254806446598, "Si": -0.9135337099030938, "Sm": -2.2085920091205886, "Sn": -1.7784318806032027, "Sr": -1.9532217443125874, "S": -1.9322065606052756, "Ta": -1.3499922267710007, "Tb": -2.1024521946416543, "Tc": -1.2026719179147018, "Te": -2.110533243509354, "Th": -1.6931595584805927, "Ti": -1.2018116805721097, "Tl": -2.09880499559517, "Tm": -2.0385977094885215, "U": -1.7926102502979737, "V": -1.1261211587293363, "W": -1.161591957299062, "Yb": -2.2413338860962844, "Y": -1.4645716950821372, "Zn": -2.2293351298129243, "Zr": -1.3412737731253563}, "2000": {"Ag": -1.5627911074260248, "Al": -1.3293361662434575, "Am": -1.9050888739182257, "As": -1.7484494999222677, "Au": -1.641561900813598, "Ba": -2.211177903301031, "Be": -0.7489133025858942, "Bi": -2.1420904803855523, "Br": -2.788054619889102, "B": -0.5586868425143805, "Ca": -1.8190962325750117, "Cd": -2.769520650878375, "Ce": -2.2161538062911332, "Cl": -2.7068181582629425, "Co": -1.34030989272944, "Cr": -1.110201585738716, "Cs": -3.2983500025910764, "Cu": -1.3420832253718193, "C": -0.47689589055293574, "Dy": -2.246426905736643, "Er": -2.201686272477587, "Eu": -2.5476685495154685, "Fe": -1.321634450950925, "F": -2.4814396020106755, "Ga": -1.7582277037881537, "Gd": -2.122618023526973, "Ge": -1.450334248846971, "Hf": -1.540267399077577, "Hg": -3.441890449292636, "Ho": -2.242579675597243, "H": -1.6772907705861013, "In": -1.9510203658599783, "Ir": -1.3324527128569208, "I": -2.788759392651708, "K": -2.8523179768875995, "La": -1.901443747732808, "Li": -1.6769000362750688, "Lu": -1.6901207441571227, "Mg": -2.007860289164119, "Mn": -1.4596103021195004, "Mo": -1.176617090739493, "Na": -2.5244193397937504, "Nb": -1.3370917759237186, "Nd": -2.2875151577965487, "Ni": -1.3219847644711613, "Np": -2.178224594496554, "N": -2.3205233974192883, "Os": -1.2481142146447635, "O": -2.4775856350728094, "Pb": -2.0849862672954345, "Pd": -1.4174410530134216, "Pr": -2.56318909675079, "Pt": -1.4726527439498367, "Pu": -2.168247914183552, "P": -1.8985935637663884, "Rb": -3.1386402031403846, "Re": -1.3556811939679743, "Rh": -1.282286365756335, "Rn": -4.1042721666580295, "Ru": -1.1630232678654713, "Sb": -1.821902886459035, "Sc": -1.3719106596880344, "Se": -2.2564839094159717, "Si": -1.0125449551743795, "Sm": -2.3724568585790538, "Sn": -1.901583665854796, "Sr": -2.164218272270301, "S": -2.0858304399647616, "Ta": -1.4464953101518372, "Tb": -2.255303933253874, "Tc": -1.2940353422811837, "Te": -2.2851572783334198, "Th": -1.8177944758252578, "Ti": -1.3001948489402497, "Tl": -2.326988651085661, "Tm": -2.184378919002954, "U": -1.933167849924859, "V": -1.213989739337721, "W": -1.2480924496035652, "Yb": -2.4609390060631187, "Y": -1.5799502513344044, "Zn": -2.4365310670052343, "Zr": -1.4406146033062135}}
        
    @property
    def m(self):
        """
        Returns:
            reduced mass (float)
        """
        names = self.atom_names
        nums = self.atom_nums
        mass_d = self.mass_d
        num_els = len(names)
        num_atoms = np.sum(nums)        
        denom = (num_els - 1) * num_atoms
        if denom <= 0:
            print('descriptor should not be applied to unary compounds (elements)')
            return np.nan
        masses = [mass_d[el] for el in names]
        good_masses = [m for m in masses if not math.isnan(m)]
        if len(good_masses) != len(masses):
            for el in names:
                if math.isnan(mass_d[el]):
                    print('I dont have a mass for %s...' % el)
                    return np.nan
        else:
            pairs = list(combinations(names, 2))
            pair_red_lst = []
            for i in range(len(pairs)):
                first_elem = names.index(pairs[i][0])
                second_elem = names.index(pairs[i][1])
                pair_coeff = nums[first_elem] + nums[second_elem]
                pair_prod = masses[first_elem] * masses[second_elem]
                pair_sum = masses[first_elem] + masses[second_elem]
                pair_red = pair_coeff * pair_prod / pair_sum
                pair_red_lst.append(pair_red)
            return np.sum(pair_red_lst) / denom
            
    def V(self, vol_per_atom=False):
        """
        Args:
            vol_per_atom (float or bool) - if reading in structure file, False; else the calculated atomic volume [A^3/atom]
        Returns:
            calculated atomic volume (float) [A^3/atom]
        """
        if self.path_to_structure != False:
            struct = Structure.from_file(self.path_to_structure )
            return struct.volume / len(struct) 
        else:
            return vol_per_atom
    
    def Gd_sisso(self, T, vol_per_atom=False):
        """
        Args:
            T (int) - temperature [K]
            vol_per_atom (float or bool) - if reading in structure file, False; else the calculated atomic volume [A^3/atom]        
        Returns:
            G^delta as predicted by SISSO-learned descriptor (float) [eV/atom]
        """
        if len(self.atom_names) == 1:
            return 0
        else:
            m = self.m
            V = self.V(vol_per_atom)
            return (-2.48e-4*np.log(V) - 8.94e-5*m/V)*T + 0.181*np.log(T) - 0.882
    
    def summed_Gi(self, T):
        """
        Args:
            T (int) - temperature [K]
        Returns:
            sum of the stoichiometrically weighted chemical potentials of the elements at T (float) [eV/atom]
        """
        names, nums = self.atom_names, self.atom_nums
        Gels = self.Gi_d
        els_sum = 0
        for i in range(len(names)):
            el = names[i]
            if el not in Gels[str(T)]:
                return np.nan
            num = nums[i]
            Gi = Gels[str(T)][el]
            els_sum += num*Gi
        return els_sum
    
    def G(self, T, vol_per_atom=False):
        """
        Args:
            T (int) - temperature [K]
            vol_per_atom (float or bool) - if reading in structure file, False; else the calculated atomic volume [A^3/atom]        
        Returns:
            Absolute Gibbs energy at T using SISSO-learned descriptor for G^delta (float) [eV/atom]
        """
        if len(self.atom_names) == 1:
            Gels = self.Gi_d
            el = self.atom_names[0]
            return Gels[str(T)][el]
        else:
            return self.H + self.Gd_sisso(T, vol_per_atom)
    
    def dG(self, T, vol_per_atom=False):
        """
        Args:
            T (int) - temperature [K]
            vol_per_atom (float or bool) - if reading in structure file, False; else the calculated atomic volume [A^3/atom]        
        Returns:
            Gibbs formation energy at T using SISSO-learned descriptor for G^delta (float) [eV/atom]
        """
        if len(self.atom_names) == 1:
            return 0.
        else:
            return ((self.H + self.Gd_sisso(T, vol_per_atom))*96.485*self.num_atoms - 96.485*self.summed_Gi(T)) / self.num_atoms / 96.485


def parseStruct_old():
    """docstring for parseStruct"""
    try:
        f = open('struct.dat')
    except:
        print("Error: no struct.dat")
        exit(0)
    date = []
    try:
        for line in f:
            date.append(line)
    except:
        f.close()

    ldate = len(date)
    structData = []
    for i in range(ldate):
        if 'nstruct' in date[i]:
            hardness = 0.
            polar = 0.
            bandgap = 100.
            xrddiff=610612509.
            nstruct = int(date[i].split('=')[1].strip())
            # print 'ns', nstruct
            gtype = 1
            for j in range(i+1, ldate):
                if 'GenType' in date[j]:
                    gtype = date[j].split(':')[1].strip()
                if 'Optimized' in date[j]:
                    for k in range(j+1, ldate):
                        if 'Energy' in date[k]:
                            try:
                                energy = float(date[k].split('=')[1])
                            except:
                                energy = 610612509.
                        if 'Hardness' in date[k]:
                            try:
                                hardness = float(date[k].split('=')[1])
                            except:
                                hardness = 0.
                        if 'Polar' in date[k]:
                            try:
                                polar = abs(float(date[k].split('=')[1]))
                                if math.isnan(polar): polar = 0.
                            except:
                                polar = 0.
                        #if 'diff_gap' in date[k]:
                        if 'DiffGap' in date[k]:
                            try:
                                bandgap = float(date[k].split('=')[1])
                                if math.isnan(bandgap): bandgap = 100.
                            except:
                                bandgap = 100.
                        if 'XRDdiff' in date[k]:
                            try:
                                xrddiff = float(date[k].split('=')[1])
                                if math.isnan(xrddiff): xrddiff = 610612509.
                            except:
                                xrddiff = 610612509.
                        if 'Number Species' in date[k]:
                            ntype = int(date[k].split('=')[1])
                        if 'Ele_Num' in date[k]:
                            typt = list(map(int, date[k].split('=')[1].split()))
                            natom = sum(typt)
                            #print typt,natom
                        if 'lat_matrix' in date[k]:
                            # print  date[k+1 : k+4]
                            lat = np.array([item.split() for item in date[k+1 : k+4]], float)
                        if 'Atomic' in date[k]:
                            pos = np.array([item.split() for item in date[k+1 : k+1+natom]], float)

                        if 'nstruct' in date[k]:
                            break
                    break

            structData.append( [energy, hardness, nstruct, gtype, (lat, pos, typt, natom), polar, bandgap, xrddiff] )
            # print '#', nstruct, gtype, energy, typt
            # print lat
            # print pos
    return structData

def parseStruct():
    """docstring for parseStruct"""
    try:
        f = open('struct.dat')
    except:
        print("Error: no struct.dat")
        exit(0)
    date = []
    try:
        for line in f:
            date.append(line)
    except:
        f.close()

    ldate = len(date)
    structData = []
    i = 0
    ldate = len(date)
    while True:
        if 'nstruct' in date[i]:
            forme = 0.
            hardness = 0.
            polar = 0.
            bandgap = 100.
            xrddiff=610612509.
            nstruct = int(date[i].split('=')[1].strip())
            # print 'ns', nstruct
            gtype = 1
            # for j in range(i+1, ldate):
            j = i
            lcurr = True
            while lcurr :
                j = j + 1
                if 'GenType' in date[j]:
                    gtype = date[j].split(':')[1].strip()
                if 'Optimized' in date[j]:
                    # for k in range(j+1, ldate):
                    k = j
                    while lcurr :
                        k = k + 1
                        # print k, date[k]
                        line = date[k]
                        if 'Energy' in line:
                            try:
                                energy = float(line.split('=')[1])
                            except:
                                energy = 610612509.
                        elif 'Hardness' in line:
                            try:
                                hardness = float(line.split('=')[1])
                            except:
                                hardness = 0.
                        elif 'Polar' in line:
                            try:
                                polar = abs(float(line.split('=')[1]))
                                if math.isnan(polar): polar = 0.
                            except:
                                polar = 0.
                        #if 'diff_gap' in line:
                        elif 'DiffGap' in line:
                            try:
                                bandgap = float(line.split('=')[1])
                                if math.isnan(bandgap): bandgap = 100.
                            except:
                                bandgap = 100.
                        elif 'XRDdiff' in line:
                            try:
                                xrddiff = float(line.split('=')[1])
                                if math.isnan(xrddiff): xrddiff = 610612509.
                            except:
                                xrddiff = 610612509.
                        elif 'Number Species' in line:
                            ntype = int(line.split('=')[1])
                        elif 'Ele_Num' in line:
                            typt = list(map(int, line.split('=')[1].split()))
                            natom = sum(typt)
                        elif 'lat_matrix' in line:
                            # print  date[k+1 : k+4]
                            lat = np.array([item.split() for item in date[k+1 : k+4]], float)
                            k = k + 3
                        elif 'Atomic' in line:
                            pos = np.array([item.split() for item in date[k+1 : k+1+natom]], float)
                            k = k + natom
                        elif 'nstruct' in line or k +3 > ldate :
                            i = k
                            lcurr = False

            structData.append( [energy, hardness, nstruct, gtype, (lat, pos, typt, natom), polar, bandgap, xrddiff, forme] )
            # print 'i', i, ldate
            if i +10 > ldate - 1  :
                break
            # print '#', nstruct, gtype, energy, typt
            # print lat
            # print pos
    return structData

def SplitVSCStruct():
    try:
        f = open('struct.dat')
    except:
        print("Error: no struct.dat")
        exit(0)
    date = []
    try:
        for line in f:
            date.append(line)
    except:
        f.close()

    ldate = len(date)
    structData = []
    AllData= {}
    i = 0
    ldate = len(date)
    while True:
        fstr = ''
        if 'nstruct' in date[i]:
            nstruct = int(date[i].split('=')[1].strip())
            j = i + 1
            lcurr = True
            while lcurr :
                fstr  += date[j]
                j = j + 1
                if 'Ele_Num' in date[j] :
                    typt = list(map(int, date[j].split('=')[1].split()))
                    typt = gcdnum(typt)
                    fus = '_'.join(map(str, typt))
                elif 'nstruct' in date[j] or j +3 > ldate :
                    if fus in AllData :
                        fstr = '            nstruct= ' + str(len(AllData[fus]) + 1)  + '\n'+ fstr
                        AllData[fus].append(fstr)
                    else :
                        fstr = '            nstruct= 1' + '\n' + fstr
                        AllData[fus] = [fstr]
                    i = j
                    lcurr = False

            if i +10 > ldate - 1  :
                break

    if fus in AllData :
        fstr = '            nstruct= ' + str(len(AllData[fus]) + 1)  + '\n'+ fstr
        AllData[fus].append(fstr)
    else :
        fstr = '            nstruct= 1' + '\n' + fstr
        AllData[fus] = [fstr]
    for fus in AllData :
        # print fus
        # print AllData[fus][2]
        fdir = 'data_' + fus + '/'
        os.system('mkdir -p ' + fdir)
        outf = fdir + 'struct.dat'
        with open(outf, 'w')  as fw :
            for line in AllData[fus] :
                fw.write(line)

    return 

def parseTS():
    """docstring for parseStruct"""
    try:
        f = open('TS.dat')
    except:
        print("Error: no TS.dat")
        exit(0)
    date = []
    try:
        for line in f:
            date.append(line)
    except:
        f.close()

    ldate = len(date)
    structData = []
    for i in range(ldate):
        if 'NTranState' in date[i]:
            nstruct = int(date[i].split('=')[1].strip())
        if 'Potential' in date[i]:
            pts=float(date[i].split('=')[1])
            for j in range(i+1, ldate):
                if 'Number Species' in date[j]:
                    ntype = int(date[j].split('=')[1])
                if 'Ele_num' in date[j]:
                    typt = list(map(int, date[j].split('=')[1].split()))
                    natom = sum(typt)
                    structure=[]
                    for k in range(j+1, ldate):
                        if 'structure' in date[k]:
                           # print date[k].split()[1].strip()
                           energy = float(date[k].split('=')[1].strip())
                        if 'lat_matrix' in date[k]:
                            lat = np.array([item.split() for item in date[k+1 : k+4]], float)
                        if 'Atomic' in date[k]:
                            pos = np.array([item.split() for item in date[k+1 : k+1+natom]], float)
                            structure.append((lat,pos,typt,natom,energy))
                        if 'NTranState' in date[k]:
                            break
                    break
            # print 'nstruct',nstruct
            # raw_input()
            structData.append( [pts, nstruct, structure] )
    return structData

def parseIni():
    """docstring for parseStruct"""
    try:
        f = open('struct.dat')
    except:
        print("Error: no struct.dat")
        exit(0)
    date = []
    try:
        for line in f:
            date.append(line)
    except:
        f.close()

    ldate = len(date)
    structData = []
    for i in range(ldate):
        if 'nstruct' in date[i]:
            hardness = 0.
            polar = 0.
            bandgap = 100.
            energy = 0.
            gtype = 'A'
            nstruct = int(date[i].split('=')[1].strip())
            for j in range(i+1, ldate):

                if 'Initial Structure' in date[j]:
                    for k in range(j+1, ldate):

                        if 'Number Species' in date[k]:
                            ntype = int(date[k].split('=')[1])
                        if 'Ele_Num' in date[k]:
                            typt = list(map(int, date[k].split('=')[1].split()))
                            natom = sum(typt)
                        if 'lat_matrix' in date[k]:
                            # print  date[k+1 : k+4]
                            lat = np.array([item.split() for item in date[k+1 : k+4]], float)
                        if 'Atomic' in date[k]:
                            pos = np.array([item.split() for item in date[k+1 : k+1+natom]], float)

                        if 'nstruct' in date[k]:
                            break
                    break

            structData.append( [energy, hardness, nstruct, gtype, (lat, pos, typt, natom), polar, bandgap] )
            # print '#', nstruct, gtype, energy, typt
            # print lat
            # print pos
    return structData

def parseOpt(optf='opt', hm=False):
    if optf == 'opt':
        optfiles = glob.glob('pso_opt_*')
    else:
        optfiles = glob.glob('pso_dft_*')

    ofls = sorted(optfiles, key=lambda x: int(x.split('_')[2]))

    #print ofls
    hardness = 0.
    polar = 0.
    bandgap = 100.
    xrddiff=610612509.
    gtype = '(^3^)'
    nstruct = 0
    enth = []
    stru = []
    for optfile in ofls:
        fline = []
        f = open(optfile)
        try:
            for line in f:
                fline.append(line)
        finally:
            f.close()
        if hm:
            system = fline[2]
        else:
            system = fline[1]
        nstr = 0
        for item in fline:
            if item.strip() == system.strip(): nstr += 1
        num = 0
        for i in range(0, nstr):
            nstruct += 1
            if hm:
                polar = abs(float(fline[num].split()[0]))
                enthalpy = float(fline[num].split()[1])
                num += 1
            else:
                enthalpy = float(fline[num].split()[0])
                enth.append(enthalpy)
            natom = sum(map(int, fline[num+6].split()))
            #
            strutmp = fline[num+1 : num+natom+8]
            lat = []
            for i in range(2, 5):
                lat.append(list(map(float, strutmp[i].split())))
            lat = np.array(lat, float)
            typt = list(map(int, strutmp[5].split()))
            pos = []
            for item in strutmp[7:]:
                pos.append(list(map(float, item.split()[:3])))
            pos = np.array(pos, float)
            stru.append( [enthalpy, hardness, nstruct, gtype, (lat, pos, typt, natom), polar, bandgap, xrddiff] )
            num = num + natom + 8

    return stru

def parseMol():

    psofiless = glob.glob('pso_struct_*')
    psofiles = sorted(psofiless, key=lambda x: int(x.split('_')[2]))
    d = []
    for psofile in psofiles:
        f = open(psofile)
        try:
            for line in f:
                d.append(line.split())
        finally:
            f.close()


    hardness = 0.
    bandgap = 100.
    xrddiff=610612509.
    polar = 0.
    gtype = '(^3^)'

    structData = []
    i = 0
    nstruct = 0
    while i < len(d):
        nstruct += 1
        e = float(d[i][0])
        lat = np.array(d[i+1:i+4], float)
        # print d[i+4]
        natom = int(d[i+4][0])
        # print natom
        atom = d[i+5:i+5+natom]

        atoms = sorted(atom, key=lambda x: int(x[0]))
        typ = [int(x[0]) for x in atoms]

        typt = []
        for x in set(typ):
            k = 0
            for item in typ:
                if item == x: k += 1
            typt.append(k)

        pos = np.array([x[2:] for x in atoms], float)

        for j in range(len(pos)):
            for k in range(3):
                pos[j][k] = pos[j][k] - np.floor(pos[j][k])

        structData.append( [e, hardness, nstruct, gtype, (lat, pos, typt, natom), polar, bandgap,xrddiff ])
        i += (5+natom)
        # print 'i2',i

    # print len(structData)
    return structData

def parseSur():
    global name_ele
    try:
        f = open('CALYPSO.log')
    except:
        print('Error: no CALYPSO.log')
        sys.exit(0)

    hardness = 0.
    nstruct = 0
    polar = 0.
    bandgap = 100.
    xrddiff=610612509.
    data = []
    for line in f:
        data.append(line.split())
    f.close()

    structData = []

    for i in range(len(data)):
        if '/' not in data[i][0] and 'Generation' in data[i][0] and 'opt' in data[i][0]:
            for j in range(i+1, len(data)):
                if data[j][0] == 'Group_index':
                    for k in range(j+1, len(data)):
                        if data[k][0] == 'Gen':
                            gtype = data[k][1]
                        if data[k][0] == 'Fitness':
                            try:
                                energy = float(data[k][1])
                            except:
                                energy = 610612509.
                        if data[k][0] == 'Lattice_Matrix':
                            lat = np.array(data[k+1:k+4], float)
                        if data[k][0] == 'Atoms_Info':
                            natom = sum(map(int, data[k][1:]))
                            tpos = data[k+1:k+1+natom]
#                            sym = [ x[0] for x in tpos]
#                            pos = np.array([x[1:4] for x in tpos], float)
                            atominfo={}
                            for x in tpos:
                                atominfo.setdefault(x[0],[]).append([float(x[1]),float(x[2]),float(x[3]),x[7]])
                            NameOfAtoms=list(atominfo.keys())
                            typt=[len(atominfo[x]) for x in NameOfAtoms]
                            pos=[]
                            for x in NameOfAtoms:
                                for xx in range(len(atominfo[x])):
                                    pos.append(atominfo[x][xx])
#                            typt = []
#                            NameOfAtoms = list(set(sym))
#                            NameOfAtoms.sort(key = sym.index)
#                            NameOfAtoms=atominfo.keys()
#                            typt=[len(atominfo[x]) for x in NameOfAtoms]
#                            for x in NameOfAtoms:
#                                l = 0
#                                for item in sym:
#                                    if item == x: l += 1
#                                typt.append(l)
                        if data[k][0] == 'Group_index':
                            break
                    nstruct += 1
                    structData.append( [energy, hardness, nstruct, gtype, (lat, pos, typt, natom), polar, bandgap, xrddiff] )
                if '/' in data[j][0] and 'Generation' in data[j][0] and 'opt' in data[j][0]:
                    break
    name_ele = NameOfAtoms[:]
    return structData

def write_cif(pdir, cell, no, sgdata, wori, wprim):
    """convert the vasp poscar to cif file"""

    global name_ele
    tt = time.localtime()
    ttt = str(tt[0])+'-'+str(tt[1])+'-'+str(tt[2])+'\n'
    l = cell[0].copy()
    p = cell[1].copy()
    typt = cell[2][:]
    sg = sgdata[0]
    sgsymbol = sgdata[1]

    ra = math.sqrt(l[0][0]**2 + l[0][1]**2 + l[0][2]**2)
    rb = math.sqrt(l[1][0]**2 + l[1][1]**2 + l[1][2]**2)
    rc = math.sqrt(l[2][0]**2 + l[2][1]**2 + l[2][2]**2)

    cosinea = (l[1][0]*l[2][0] + l[1][1]*l[2][1] + l[1][2]*l[2][2])/rb/rc
    cosineb = (l[0][0]*l[2][0] + l[0][1]*l[2][1] + l[0][2]*l[2][2])/ra/rc
    cosinec = (l[0][0]*l[1][0] + l[0][1]*l[1][1] + l[0][2]*l[1][2])/ra/rb

    anglea = math.degrees(math.acos(cosinea))
    angleb = math.degrees(math.acos(cosineb))
    anglec = math.degrees(math.acos(cosinec))

    alpha = anglea
    beta = angleb
    gamma = anglec
    if wori:
        ofile = pdir + '/' + str(no) + ".cif"
        sgsymbol = 'P1'
    elif wprim:
        ofile = pdir + '/' + str(no) + '_' + str(sg) + "_p.cif"
    else:
        ofile = pdir +'/' + str(no) + '_' +str(sg)+".cif"
    f = open(ofile, 'w')
    f.write("data_" + sgsymbol + "\n"
            + "_audit_creation_date               " + ttt
            + "_audit_creation_method             'CALYPSO -> cif'\n"
            + "_symmetry_space_group_name_H-M     'P1'\n"
            + "_symmetry_Int_Tables_number        1\n"
            + "_symmetry_cell_setting             triclinic\n"
            + "loop_\n"
            + "_symmetry_equiv_pos_as_xyz\n"
            + "x,y,z\n"
            + "_cell_length_a" + ' '*8 + ("%8.4f" % ra)  + '\n'
            + "_cell_length_b" + ' '*8 + ("%8.4f" % rb) + '\n'
            + "_cell_length_c" + ' '*8 + ("%8.4f" % rc) + '\n'
            + "_cell_angle_alpha" + ' '*8 + ("%8.4f" % alpha) + '\n'
            + "_cell_angle_beta " + ' '*8 + ("%8.4f" % beta) + '\n'
            + "_cell_angle_gamma" + ' '*8 + ("%8.4f" % gamma) + '\n'
            + "loop_\n"
            + "_atom_site_label\n"
            + "_atom_site_type_symbol\n"
            + "_atom_site_fract_x\n"
            + "_atom_site_fract_y\n"
            + "_atom_site_fract_z\n"
            + "_atom_site_U_iso_or_equiv\n"
            + "_atom_site_adp_type\n"
            + "_atom_site_occupancy\n")
    k = 0
    num_ele = len(typt)
    for i in range(0, num_ele):
        for j in range(0, typt[i]):
            hao = str(j+1)
            f.write(name_ele[i].strip() + hao + " "*4 + name_ele[i] + ("%12.5f" % p[k][0]) +
                    ("%12.5f" % p[k][1]) + ("%12.5f" % p[k][2]) + "   0.00  Uiso   1.00\n")
            k += 1
    f.close()

def write_xyz(pdir, cell, no, sgdata, wori, wprim):

    global name_ele

    l = cell[0].copy()
    p = cell[1].copy()
    typt = cell[2][:]
    natom = sum(typt)
    sg = sgdata[0]
    sgsymbol = sgdata[1]
    ofile = pdir + '/' + str(no) + '.xyz'
    f = open(ofile, 'w')
    f.write(str(natom) + "\n")
    f.write("xyz file : generated by cak.py\n")

    k = 0

    for i in range(0, len(typt)):
        for j in range(0, typt[i]):
            x = l[0][0] * p[k][0]
            y = l[1][1] * p[k][1]
            z = l[2][2] * p[k][2]
            f.write(str(name_ele[i]) +
                    ("%12.7f " % x ) + ("%12.7f " % y ) + ("%12.7f " % z )
                    + "\n")
            k += 1

def write_vasp(pdir, cell, no, sgdata, wori, wprim):

    global name_ele

    l = cell[0].copy()
    p = cell[1].copy()
    typt = cell[2][:]
    sg = sgdata[0]
    sgsymbol = sgdata[1]

    if wori:
        ofile = pdir + '/OCell_' + str(no) + '.vasp'
        sgsymbol = 'P1'
    elif wprim:
        ofile = pdir + '/PCell_' + str(no) + '_' + str(sg) + '.vasp'
    else:
        ofile = pdir + '/UCell_' + str(no) + '_' + str(sg) + '.vasp'

    f = open(ofile, 'w')
    f.write(str(no) + ':' + sgsymbol + '(' + str(sg) + ')')
    if wprim:
        f.write(' PRIMITIVE\n')
    else:
        f.write('\n')
    f.write('1.0\n')
    for item in l:
        f.write("%12.7f %12.7f %12.7f\n" % tuple(item))
    for item in name_ele:
        f.write("%2s " % item)
    f.write('\n')
    for item in typt:
        f.write("%3d " % item)
    f.write('\n')
    f.write('Direct\n')
    for item in p:
        f.write("%8.5f %8.5f %8.5f\n" % tuple(item[0:3]))
    f.close()

def findsym(cell, prec, is_refine, is_prim):
    '''
    cell[ lattice,
          positions,
          typt,
          num_atoms
    ]
    '''

    aprec = -1

    # sl = cell[0].T.copy()
    sl = cell[0].copy()
    sp = cell[1].copy()
    stypt = cell[2][:]
    num_atoms = cell[3]

    snumbers = []
    for i in range(len(stypt)):
        snumbers += [i+1] * stypt[i]
    snumbers = np.array(snumbers, int)

    l = sl[:]
    p = sp[:]
    typt = stypt[:]
    numbers = snumbers[:]

    spacegroup_info = spg.get_spacegroup((l, p, numbers), prec, aprec)
    if spacegroup_info is None:
        num_spg = 0
        symbol_spg = 'NULL'
    else:
        num_spg = spacegroup_info.split()[1].strip('(').strip(')')
        symbol_spg = spacegroup_info.split()[0]

    if is_refine:
        # pp = np.zeros((num_atoms*4, 3), float)
        # numn = np.array([0]*(num_atoms*4), int)

        # for i in range(0, num_atoms):
        #     pp[i] = p[i]
        #     numn[i] = numbers[i]
        if num_spg is not None:
            refine_info = spg.refine_cell((l, p, numbers), prec, aprec)
            if refine_info is not None:
                ll, pp, numn = refine_info 
            else:
                ll, pp, numn = (l, p, numbers)
        else:
            ll, pp, numn = (l, p, numbers)

        num_atoms_brv = len(numn)

        refine_lat = ll
        refine_pos = []
        refine_numbers = []
        refine_typt = []


        for inums in set(numbers):
            itypt = 0
            for i in range(num_atoms_brv):
                if inums == numn[i]:
                    refine_pos.append(pp[i])
                    refine_numbers.append(numn[i])
                    itypt += 1
            refine_typt.append(itypt)

        refine_lat = np.array(refine_lat, float)
        refine_pos = np.array(refine_pos, float)
        refine_numbers = np.array(refine_numbers, int)
    else:
        refine_lat = None
        refine_pos = None
        refine_typt = None
        num_atoms_brv = None
        refine_numbers = None

    if is_prim and refine_lat is not None:
        _p_l = refine_lat.copy()
        _p_p = refine_pos.copy()
        _p_typt = refine_typt[:]
        _p_numbers = refine_numbers[:]
        if num_spg is not None:
            prim_info = spg.find_primitive((_p_l, _p_p, _p_numbers), 1e-5, -1)
            if prim_info is not None:
                p_l, p_p, p_numbers = prim_info
            else:
                p_l, p_p, p_numbers = (_p_l, _p_p, _p_numbers)
        else:
            p_l, p_p, p_numbers = (_p_l, _p_p, _p_numbers)
        num_atom_prim = len(p_numbers)
        if num_atom_prim > 0:
            prim_lat = p_l.copy()
            prim_positions = p_p[:]
            prim_numbers = p_numbers[:]
            # prim_positions = []
            # prim_numbers = []
            prim_typt = []
            for inums in set(prim_numbers):
                itypt = 0
                for i in range(num_atom_prim):
                    if inums == prim_numbers[i]:
                        # prim_positions.append(p_p[i])
                        # prim_numbers.append(p_numbers[i])
                        itypt += 1
                prim_typt.append(itypt)
        else:
            prim_lat = None
            prim_positions = None
            prim_numbers = None
            prim_typt = None
            num_atom_prim = None
    else:
        prim_lat = None
        prim_positions = None
        prim_numbers = None
        prim_typt = None
        num_atom_prim = None

    return ((num_spg, symbol_spg),
            (refine_lat, refine_pos, refine_typt, num_atoms_brv, refine_numbers),
            (prim_lat, prim_positions, prim_typt, num_atom_prim))

def plot(struct, npop):
    enth = [item[0] for item in struct]
    t = len(enth)
    nge = t / npop
    mod = t % npop

    Genth = []
    for i in range(int(nge)):
        Genth.append(enth[i*npop : (i+1)*npop])
    if mod != 0:
        Genth.append(enth[nge*npop:])

    dp = []
    for item in Genth:
        dp.append(min(item))

    Dp = []
    mine = dp[0]
    for item in dp:
        if item < mine:
            mine = item
        Dp.append(mine)

    f = open('plot.dat', 'w')
    for i in range(len(Dp)):
        f.write("%4d    %12.5f\n" % (i+1, Dp[i]))
    f.close()

    try:
        import matplotlib.pyplot as plt
    except:
        print("No matplotlib")
        if os.system('which gnuplot >/dev/null 2>/dev/null') == 0:
            os.system('''gnuplot << EOF\n set terminal dumb;\n plot 'plot.dat' w l;\n ''')
        return 0

    x = [i+1 for i in range(len(Dp))]
    y = Dp[:]

    plt.plot(x, y, 'bo-')
    plt.xlabel('Generation')
    plt.ylabel('Enthalpy (eV)')
    plt.show()


    return 0

def Zoutput(structure, options, num_proce, prec_pool, is_refine, is_prim, hard, fdir, d2, cl, norefine, hm, bg, xrd, lsur):
    global name_ele
    global temperature_list
    # global prec

    OutputData = []
    # for i in range(num_proce):
    spg_old = 0
    ene_old = 610612509
    ip = 1
    for i in range(len(structure)):
        if ip > num_proce  :
            break
        # print i
        outputdata = []
        outputdata.append(structure[i][0]) # 0 enthalpy
        outputdata.append(structure[i][2]) # 1 nstruct
        outputdata.append(structure[i][3]) # 2 gen type
        outputdata.append(structure[i][1]) # 3 hardness
        outputdata.append(structure[i][5]) # 4 polar
        outputdata.append(structure[i][6]) # 5 bandgap
        outputdata.append(structure[i][7]) # 6 xrddiff
        outputdata.append(structure[i][8]) # 7 form energy

        poscar_string  = "POSCAR\n"
        poscar_string += "1.0\n"
        for vec in structure[i][4][0]:
            poscar_string += "  %12.5f  %12.5f  %12.5f\n" % (vec[0], vec[1], vec[2])
        # print(name_ele, structure[i][4][2])

        poscar_string += "     ".join(name_ele)
        poscar_string += "\n"

        poscar_string += "     ".join(list(map(str, structure[i][4][2])))
        poscar_string += "\n"
        poscar_string += "Direct\n"
        for pos in structure[i][4][1]:
            poscar_string += "  %12.5f  %12.5f  %12.5f\n" % (pos[0], pos[1], pos[2])
        # print(poscar_string)

        dG_formula = ""
        for dG_ele, dG_atoms in zip(name_ele, structure[i][4][2]):
            dG_formula += str(dG_ele) + str(dG_atoms)
        # print("dG_formula: ", dG_formula)
        # print(type(structure[i][4][0]), structure[i][4][0])
        # print(type(structure[i][4][1]), len(structure[i][4][1]))


        dG_V = np.linalg.det(structure[i][4][0]) / len(structure[i][4][1])
        # print(dG_V)
        # print("dG_V: ", dG_V)
        # sys.exit()

        # print(poscar_string)
        # print("enthalpy: ", structure[i][0])
        # print("formE: ", structure[i][8])

        path_to_structure = False
        gbs = PredictG(dG_formula,
                       structure[i][8],
                       path_to_structure,
                       path_to_masses=None,
                       path_to_chempots=None)
        gibbs = []
        for temp in temperature_list:
            # gbs = GibbsComputedStructureEntry(
            #         Structure.from_str(poscar_string, "poscar"),    # Structure
            #         structure[i][8],    # form enthalpy
            #         temp=temp,
            #         gibbs_model="SISSO",
            #         entry_id=f"{temp}k",
            #     )
            # gibbs.append(gbs.energy_per_atom)
            # print(temp)
            # print("gbs: ", gbs.dG(T=temp, vol_per_atom=dG_V))
            gibbs.append(gbs.dG(T=temp, vol_per_atom=dG_V))

        # print("gibbs", gibbs)
        # sys.exit()
        outputdata.append(gibbs) # 8 gbs list


        if norefine:
            pass
        else:
            for prec in prec_pool:
                pdir = fdir + 'dir_' + str(prec)
                if options.is_wcif or options.is_wvasp:
                    os.system('mkdir -p ' + pdir)
                if abs(structure[i][0] - 610612509.) > 0.1:
                    (spgdata, recell, primcell) = findsym(structure[i][4], prec, is_refine, is_prim)
                    # if spgdata[0] == spg_old and abs(outputdata[0]-ene_old) < options.rme :
                    #     recell = None
                    #     break
                        
                else:
                    spgdata = (0, 'NULL')
                    recell = None
                    break

                outputdata.append(spgdata)
                if options.is_wcif and recell is not None:
                    write_cif(pdir, recell, ip, spgdata, False, False)
                    if options.is_prim and primcell[0] is not None:
                        write_cif(pdir, primcell, i+1, spgdata, False, True)
                if options.is_wvasp and recell is not None:
                    write_vasp(pdir, recell, ip, spgdata, False, False)
                    if options.is_prim and primcell[0] is not None:
                        write_vasp(pdir, primcell, ip, spgdata, False, True)
            if not recell :
                continue

        if norefine:
            options.is_origin = True
            spgdata = (1, 'P1')

        if options.is_origin:
            if options.is_wcif or options.is_wvasp or options.is_xyz:
                pdir = fdir + 'dir_origin'
                os.system('mkdir -p ' + pdir)
            if options.is_xyz:
                try:
                    write_xyz(pdir, structure[i][4], ip, spgdata, True, False)
                except:
                    pass
            if options.is_wcif:
                try:
                    write_cif(pdir, structure[i][4], ip, spgdata, True, False)
                except:
                    pass
            if options.is_wvasp:
                try:
                    write_vasp(pdir, structure[i][4], ip, spgdata, True, False)
                except:
                    pass


        ip += 1
        spg_old = spgdata[0]
        ene_old = outputdata[0]
        OutputData.append(outputdata)


    if options.is_dft:
        fw = open(fdir + 'Analysis_Dft_Output.dat', 'w')
    else:
        fw = open(fdir + 'Analysis_Output.dat', 'w')
    if options.is_gt:
        fw.write("        No.     GenType    Enthalpy")
    else:
        fw.write("        No.      Enthalpy")
    fw.write("      FormE")
    if hard: fw.write("    Hardness")
    if hm:   fw.write("       Polar")
    if bg:   fw.write("    Diff_gap")
    if xrd:   fw.write("    XRD_Diff")
    if norefine:
        pass
    else:
        for i in range(len(prec_pool)):
            fw.write("%15g" % prec_pool[i])
        for i in range(len(temperature_list)):
            fw.write("%12g" % temperature_list[i])
    fw.write("\n")

    for i in range(len(OutputData)):
        if abs(OutputData[i][0] - 610612509.) > 0.1:
            if options.is_gt :
                # fw.write("%4d (%4d)  %10s%12.5f" % (i+1, OutputData[i][1], OutputData[i][2], OutputData[i][0]))
                fw.write("%4d (%4d)  %10s%12.5f%12.5f" % (i+1, OutputData[i][1], OutputData[i][2], OutputData[i][0], OutputData[i][7]))
            else:
                # fw.write("%4d (%4d)  %12.5f" % (i+1, OutputData[i][1], OutputData[i][0]))
                fw.write("%4d (%4d)  %12.5f%12.5f" % (i+1, OutputData[i][1], OutputData[i][0], OutputData[i][7]))
        else:
            if options.is_gt:
                # fw.write("%4d (%4d)  %10s%12s" % (i+1, OutputData[i][1], OutputData[i][2], 'NULL'))
                fw.write("%4d (%4d)  %10s%12s%12.5f" % (i+1, OutputData[i][1], OutputData[i][2], 'NULL', OutputData[i][7]))
            else:
                # fw.write("%4d (%4d)  %12s" % (i+1, OutputData[i][1], 'NULL'))
                fw.write("%4d (%4d)  %12s%12.5f" % (i+1, OutputData[i][1], 'NULL', OutputData[i][7]))
        if hard:
            fw.write("%12.5f" % (OutputData[i][3] * -1))
        if hm:
            fw.write("%12.5f" % (OutputData[i][4]))
        if bg:
            fw.write("%12.5f" % (OutputData[i][5]))
        if xrd:
            fw.write("%12.5f" % (OutputData[i][6]))

        if norefine:
            pass
        else:
            for sspg in OutputData[i][9:]:
                fw.write("%15s" % (sspg[1].strip() + "(" + str(sspg[0]) + ")"))

        for ggibbs in OutputData[i][8]:
            fw.write("%12.5f" % ggibbs)
        fw.write("\n")
    fw.close()

def output(structure, options, num_proce, num_neb):
    global name_ele
    global prec

    spgdata = (1, 'P1')
    OutputData = []
    fdir = './'
    pdir = fdir + 'dir_' + 'ts'
    os.system('mkdir -p ' + pdir)
    for  i in range(num_proce):
        outputdata = []
        outputdata.append(structure[i][1]) # 0 nstruct
        outputdata.append(structure[i][0]) # 1 pts
        energy=[]
        for j in range(num_neb):
            energy.append(structure[i][2][j][4])

        ids=energy.index(max(energy))
        ts_struct=structure[i][2][ids][0:4]
        if options.is_xyz:
            try:
                write_xyz(pdir, ts_struct, i+1, spgdata, True, False)
            except:
                pass
        if options.is_wcif:
            try:
                write_cif(pdir, ts_struct, i+1, spgdata, True, False)
            except:
                pass
        if options.is_wvasp:
            try:
                write_vasp(pdir, ts_struct, i+1, spgdata, True, False)
            except:
                pass
        tsdir = pdir + '/' + str(i+1)+ '_path'
        os.system('mkdir -p ' + tsdir)
        for  j in range(num_neb):
            ts_struct=structure[i][2][j][0:4]
            if options.is_xyz:
                try:
                    write_xyz(tsdir, ts_struct, j+1, spgdata, True, False)
                except:
                    pass
            if options.is_wcif:
                try:
                    write_cif(tsdir, ts_struct, j+1, spgdata, True, False)
                except:
                    pass
            if options.is_wvasp:
                try:
                    write_vasp(tsdir, ts_struct, j+1, spgdata, True, False)
                except:
                    pass

        OutputData.append(outputdata)


    if options.is_dft:
        fw = open(fdir + 'Analysis_Dft_Output.dat', 'w')
    else:
        fw = open(fdir + 'Analysis_Output.dat', 'w')

    fw.write("        No.     Potential_Barrier")
    fw.write("\n")

    for i in range(len(OutputData)):
        if abs(OutputData[i][1] - 610612509.) > 0.1:
            fw.write("%4d (%4d)  %12.5f" % (i+1, OutputData[i][0], OutputData[i][1]))
        else:
            fw.write("%4d (%4d)  %12s" % (i+1, OutputData[i][0], 'NULL'))
        fw.write("\n")
    fw.close()

def vsckit_old(structure, vsce, name_ele, options, prec_pool, is_refine, is_prim, hard, cl, norefine, hm, bg, xrd):

    os.system('rm -rf dir_* > /dev/null 2> /dev/null')
    #structure
    #Bstruct = sorted(structure, key = lambda x : x[4][2]) # sorted with typt
    Bstruct = sorted(structure, key = lambda x: float(x[4][2][0])/float(sum(x[4][2][:])))
    #TYPT = [x[4][2] for x in Bstruct]
    TYPT = [float(x[4][2][0])/float(sum(x[4][2][:])) for x in Bstruct]
    TYPT2 = [float(x[4][2][1])/float(sum(x[4][2][:])) for x in Bstruct]
    print('TYPT', TYPT, len(TYPT))
    print('TYPT2', TYPT2, len(TYPT2))
    x = TYPT[0]
    Typt = []
    Typt.append(x)
    x2 = TYPT2[0]
    Typt2 = []
    Typt2.append(x2)
    for item, item2 in zip(TYPT, TYPT2):
        if abs(item - x) > 1e-4 and abs(item2 - x2) > 1e-4 :
            x = item
            Typt.append(x)
            x2 = item2
            Typt2.append(x2)
    print(Typt, len(Typt))
    print(Typt2, len(Typt))
    sys.exit(0)
    BStruct = []
    for item, item2 in zip(Typt, Typt2):
        bst = []
        for x in Bstruct:
            if abs( float(x[4][2][0])/float(sum(x[4][2][:])) - item ) < 1e-4 and \
                    abs( float(x[4][2][1])/float(sum(x[4][2][:])) - item2 ) < 1e-4:
                # print x[4][2][:]
                # print float(x[4][2][0])/float(sum(x[4][2][:])), item
                #print float(x[4][2][0])/float(sum(x[4][2][:]))-item
                bst.append(x)
        BStruct.append(bst)

    # print Typt[1]
    # print BStruct[1][0]
    # sys.exit(0)

    for i in range(len(BStruct)):
        for j in range(len(BStruct[i])):
            e1 = 0.
            for k in range(len(vsce)):
                e1 += vsce[k]*BStruct[i][j][4][2][k]
            forme = (BStruct[i][j][0] * BStruct[i][j][4][3] - e1) / BStruct[i][j][4][3]
            BStruct[i][j].append(forme)

    # print Typt[3]
    # print BStruct[3][1]
    # print len(BStruct[3][1])
    # sys.exit(0)

    Ydata = []
    Xdata = []
    xlabel = []
    Xlab = []
    for i in range(len(BStruct)):

        SBS = sorted(BStruct[i], key = lambda x : x[-1])
        # xlabel = float(Typt[i][-1]) / sum(Typt[i])
        # pdata.append(xlabel)
        #print Typt[i], SBS[0][5]
        #if len(name_ele) > 2:
        #    Xdata.append(i+1)
        #else:
        #    Xdata.append(float(Typt[i][-1]) / sum(Typt[i]))
        if  abs(SBS[0][-1] - 610612509) > 100.:
            Xdata.append(Typt[i])
            Ydata.append(SBS[0][-1])
        # print Ydata
        vdir = '%.4f' % Typt[i]
        vdir2 = '%.4f' % Typt2[i]
        xt = 'x'
        # for j in range(len(Typt[i])):
        #     vdir += name_ele[j] + str(Typt[i][j])
        #     xt += name_ele[j] + '_{' + str(Typt[i][j]) + '}'

        # print vdir
        xxt = r'$' + xt + r'$'
        if  abs(SBS[0][-1] - 610612509) > 100.:
            xlabel.append(xxt)
            Xlab.append(vdir)
        if options.is_all:
            num_proce = len(SBS)
        else:
            if options.num_proce < len(SBS):
                num_proce = options.num_proce
            else :
                num_proce = len(SBS)
        fdir = 'dir_' + vdir + '_' + vdir2 + '/'
        os.system('mkdir -p ' + fdir)
        lsur='F'
        Zoutput(SBS, options, num_proce, prec_pool, is_refine, is_prim, hard, fdir, False, cl, norefine, hm, bg, xrd, lsur)
    if len(name_ele) == 2:
        if Xdata[0] < Xdata[-1]:
            Xdata = [0.] + Xdata + [1.]
        else:
            Xdata = [1.] + Xdata + [0.]
        Ydata = [0] + Ydata + [0]
        xlabel = [r'$'+name_ele[0]+r'$'] + xlabel + [r'$'+name_ele[1]+r'$']
        Xlab = [name_ele[0]] + Xlab + [name_ele[1]]

    f = open('Convexhull.dat', 'w')
    for i in range(len(Xdata)):
        if len(name_ele) == 2:
            f.write('%5.4f  %12.5f  %15s\n' % (Xdata[i], Ydata[i], Xlab[i]))
        else:
            f.write('%4d  %12.5f  %15s\n' % (Xdata[i], Ydata[i], Xlab[i]))
    f.close()

    if options.is_pch:

        try:
            import matplotlib.pyplot as plt
        except:
            print("No matplotlib")
            return 0


        plt.plot(Xdata, Ydata, 'bo--')
        plt.ylabel('Enthalpy (eV)')
        plt.xticks(Xdata,tuple(xlabel))
        plt.title('Convex hull')
        if len(name_ele) == 2:
            plt.axis([0, 1, min(Ydata)-abs(min(Ydata)*.05), max(Ydata)+abs(max(Ydata)*.05)])
        else:
            plt.axis([0, len(Xdata)+1, min(Ydata)-abs(min(Ydata)*.05), max(Ydata)+abs(max(Ydata)*.05)])
        plt.show()

def vsckit(structure, vsce, name_ele, options, prec_pool, is_refine, is_prim, hard, cl, norefine, hm, bg, xrd):
    import itertools
    import pandas as pd

    os.system('rm -rf dir_* > /dev/null 2> /dev/null')
    Bstruct = structure
    #structure
    #Bstruct = sorted(structure, key = lambda x : x[4][2]) # sorted with typt
    #Bstruct = sorted(structure, key = lambda x: float(x[4][2][0])/float(sum(x[4][2][:])))
    # Bstruct = sorted(structure, key = lambda x: (float(x[4][2][0])/float(sum(x[4][2][:])),float(x[4][2][0])/float(sum(x[4][2][:]))))
    TYPT = [x[4][2][:] for x in Bstruct]
    ENTH = [x[0] for x in Bstruct]
    StruNum = [x[2] for x in Bstruct]
    tmp_list = []
    for one in TYPT :
        if one not in tmp_list :
            tmp_list.append(one)
    # print len(tmp_list)
    typt_list = []
    for one in tmp_list :
        one = gcdnum(one)
        if one not in typt_list :
            typt_list.append(one)

    print(len(typt_list))
    typt_dict = {}
    BStruct = []
    for i in range(len(typt_list)):
        temp_int = list(map(int, typt_list[i]))
        str1 = '_'.join(map(str, temp_int))
        typt_dict[str1] = i
        BStruct.append([])
    # print BStruct
    for x in Bstruct:
        typt = x[4][2][:]
        typt = gcdnum(typt)
        typt = list(map(int, typt))
        str1 = '_'.join(map(str, typt))
        BStruct[int(typt_dict[str1])].append(x)

    # print(BStruct)
    # print(vsce)

    for i in range(len(BStruct)):
        # print len(BStruct[i])
        for j in range(len(BStruct[i])):
            e1 = 0.
            for k in range(len(vsce)):
                e1 += vsce[k]*BStruct[i][j][4][2][k]
            forme = (BStruct[i][j][0] * BStruct[i][j][4][3] - e1) / BStruct[i][j][4][3]
            # forme = BStruct[i][j][0]
            # BStruct[i][j].append(forme)
            BStruct[i][j][8] = forme

    # for i in range(len(BStruct)):
    for key in typt_dict :
        i = typt_dict[key]
        # SBS = sorted(BStruct[i], key = lambda x : x[-1])
        SBS = sorted(BStruct[i], key = lambda x : x[0])
        if options.is_all:
            num_proce = len(SBS)
        else:
            if options.num_proce < len(SBS):
                num_proce = options.num_proce
            else :
                num_proce = len(SBS)
        fdir = 'dir_' + key + '/'
        print(fdir, len(SBS))
        os.system('mkdir -p ' + fdir)
        lsur='F'
        Zoutput(SBS, options, num_proce, prec_pool, is_refine, is_prim, hard, fdir, False, cl, norefine, hm, bg, xrd, lsur)

    # convexhull.csv
    kformula = []
    kenth = []
    knum = []
    cdata = zip(TYPT, ENTH, StruNum)
    for tformula_num, tenth, Num in cdata:
        tformula_num_float = list(map(int, tformula_num))
        tformula_num_str   = list(map(str, tformula_num_float))
        tformula =  ''.join([a + b for a,b in zip(name_ele, tformula_num_str)])
        kformula.append(tformula)
        kenth.append(tenth)
        knum.append(Num)

    df = pd.DataFrame({'Number':knum,'formula':kformula,'enthalpy':kenth,})
    df.to_csv('convexhull.csv',index=False)

def gcdnum(xl):
    m = min(xl)
    for i in range(m,1,-1):
        if not any([x%i for x in xl]):
            return [x/i for x in xl]
    return xl

def run():
    global name_ele
    global prec
    global temperature_list

    pinfinty = float(1e300)
    einfinty = float(-1e300)

    evolution = False

    parser = OptionParser()
    parser.set_defaults( is_all = False,
                         is_wcif = False,
                         is_wvasp = False,
                         is_xyz   = False,
                         is_prim = False,
                         is_origin = False,
                         is_hard = False,
                         is_gt = False,
                         is_v = False,
                         is_pch = False,
                         is_popt = False,
                         is_dft = False,
                         is_nosym = False,
                         is_ini = False,
                         plotch = False,
                         plotevo = False,
                         num_proce = 50,
                         prec = 0.1,
                         mprec = None,
                         minh = einfinty,
                         maxh = pinfinty,
                         minp = einfinty,
                         maxp = pinfinty,
                         mine = einfinty,
                         is_vsc_split = False, 
                         rme = 0.001, 
                         maxe = pinfinty,
                         temperature_list = None )
    parser.add_option("-a", dest="is_all", action="store_true")
    parser.add_option("--cif", dest="is_wcif", action="store_true")
    parser.add_option("--pos", "--vasp", dest="is_wvasp", action="store_true")
    parser.add_option("--xyz", dest="is_xyz", action="store_true")
    parser.add_option("--pri", "--prim", "--primitive", dest="is_prim", action="store_true")
    parser.add_option("--ori", "--orig",  "--origin", dest="is_origin", action="store_true")
    parser.add_option("--gt", dest="is_gt", action="store_true")
    parser.add_option("--nosym", dest="is_nosym", action="store_true")
    parser.add_option("-n", dest="num_proce", type="int")
    parser.add_option("-t", "--tolerance", dest="prec", type="float")
    parser.add_option("-m", "--multi-tolerance", dest="mprec", action="store", type="string")
    parser.add_option("-p", dest="is_plot", action="store_true")
    parser.add_option("--hard", dest="is_hard", action="store_true")
    parser.add_option("--minh", dest="minh", type="float")
    parser.add_option("--maxh", dest="maxh", type="float")
    parser.add_option("--mine", dest="mine", type="float")
    parser.add_option("--maxe", dest="maxe", type="float")
    parser.add_option("--minp", dest="minp", type="float")
    parser.add_option("--maxp", dest="maxp", type="float")
    parser.add_option("--pch", dest="is_pch",  action="store_true")
    parser.add_option("--popt", dest="is_popt",  action="store_true")
    parser.add_option("--dft", dest="is_dft",  action="store_true")
    parser.add_option("--ini", dest="is_ini", action="store_true")
    parser.add_option("--ts", dest="is_ts", action="store_true")
    parser.add_option("--split", dest="is_vsc_split", action="store_true")
    parser.add_option("--rme","--remove-energy",dest="rme", type="float")
    parser.add_option("--plotch","--plot_convexhull",dest="plotch", action="store_true")
    parser.add_option("--plotevo","--plot_evo",dest="plotevo", action="store_true")
    parser.add_option("--temps","--temperature_list",dest="temperature_list", action="store", type="string")


    parser.add_option("-v", "--version", dest="is_v", action="store_true")

    (options, args) = parser.parse_args()

    if options.is_v:
        print("Version: 2016.10.10")
        exit(0)

    if options.is_vsc_split :
        SplitVSCStruct()
        exit(0)


    (sysname, name_ele, npop, mol, hard, vsc, vsce, d2, cl, hm, lsur, bg, xrd, ts, num_neb) = readinput()
    vsce = [-4.58128953, -3.13316847875]

    if options.plotch:
        from pymatgen.analysis.phase_diagram import PDEntry, PhaseDiagram, PDPlotter
        from pymatgen.core.composition import Composition
        import pandas as pd
        
        ini_entries = []
        convexhull_data = pd.read_csv('./convexhull.csv', header=0, sep=r',')
        
        for idx, row in convexhull_data.iterrows():
            #if row['form_energy'] <= 0.02:
            comp = Composition(row['formula'])
            num_atoms = comp.num_atoms
            enth_per_atom = row['enthalpy']
            enth = enth_per_atom * num_atoms
            entry_id = row['Number']
            _entry = PDEntry(comp, enth)
            _entry.entry_id = entry_id
            # _entry.spg = row['spg']
            # _entry.p = row['P']
            # _entry.nsw = row['NSW']
            # _entry.epa = enth_per_atom
            ini_entries.append(_entry)              

        for i in range(len(name_ele)):
            comp = name_ele[i]
            enth = vsce[i]
            entry_id = name_ele[i]
            _entry = PDEntry(comp, enth)
            _entry.entry_id = entry_id
            ini_entries.append(_entry)              
            
        ini_pd = PhaseDiagram(ini_entries)
        plotter = PDPlotter(ini_pd, show_unstable=0.050, backend='plotly')
        plotter.get_plot().write_image('convexhull.png')     
        
        
        e_above_hull = []
        form_energy = []
        names = []
        nsws = []
        formulas = []
        enths = []
        spgs = []
        ps = []
        threshold_start = 0.00
        #threshold = 0.05
        
        for entry in ini_entries:
            ebh = ini_pd.get_e_above_hull(entry, )
            fme = ini_pd.get_form_energy_per_atom(entry)
            name = entry.entry_id
            # spg = entry.spg
            # p = entry.p
            formula = entry.composition.formula.replace(".", "")
            #if threshold_start <= ebh <= threshold:
            e_above_hull.append(ebh)
            form_energy.append(fme)
            names.append(name)
            formulas.append(''.join(  (''.join(str(formula))).split()  ))
            # spgs.append(spg)
            # ps.append(p)
            # enths.append(enth)
        
        
        df = pd.DataFrame(
            {
                'formula':formulas,
                'e_above_hull':e_above_hull,
                # 'spg':spgs,
                # 'p':ps,
                'form_energy':form_energy,
                'name':names,
                }
            )
        df.to_csv('./e_above_hull_50meV.csv', index=False, sep=' ')
        sys.exit()

    if options.plotevo:
        import matplotlib.pyplot as plt
        import matplotlib
        import scienceplots
        
        plt.style.use(['science', 'ieee'])
        
        
        # data
        pso_sor_list = glob.glob('./pso_sor_*')
        x = []
        yy = []
        y = [np.loadtxt('pso_sor_%d'%(t)).tolist() for t in range(1, len(pso_sor_list)+1)]
        for evo_num, ene_list in enumerate(y):
            for ene in ene_list:
                yy.append(ene)
                x.append(evo_num+1)

        temp = list(set(yy))
        temp.sort()
        max_y = temp[-1] if temp[-1] < 1000 else temp[-2]
        min_y = temp[0] if temp[0] > -1000 else temp[1]

        # colormap
        # cm = plt.cm.get_cmap('rainbow')
        cm = matplotlib.colormaps['rainbow']
        
        # fig, ax
        fig, ax = plt.subplots(figsize=(10, 4))
        
        # ax.scatter(x, yy, c=yy, cmap=cm, vmin=2.3, vmax=2.6, s=5)
        sc = ax.scatter(x, yy, c=yy, cmap=cm, vmin=min_y, vmax=max_y, s=10)
        
        # beauty
        ax.set_xlabel('Structure Evolution Step', fontsize=25, )
        ax.set_ylabel('Energy (eV/atom)', fontsize=25, )
        # ax.set_xticks([0, 10, 20, 30, 40, 50],)
        # ax.set_yticks([-3.6, -3.5, -3.4, -3.3, -3.2],)

        # ax.tick_params(width=5, labelsize=10)
        ax.set_ylim((min_y+0.3, max_y+0.3))
        
        plt.tick_params(labelsize=20)
        
        # colorbar
        cbar = fig.colorbar(sc)
        # cbar.set_ticks(ticks=[-3.6, -3.5, -3.4, -3.3, -3.2])
        # cbar.ax.tick_params(labelsize=20)
        cbar.ax.minorticks_off()
        cbar.outline.set_visible(False)
        
        
        # spines width
        width = 2
        ca = plt.gca()
        
        ca.spines['bottom'].set_linewidth(width)
        ca.spines['left'].set_linewidth(width)
        ca.spines['top'].set_linewidth(width)
        ca.spines['right'].set_linewidth(width)
        
        plt.tight_layout()
        
        fig.savefig('evo.png', dpi=350)
        sys.exit()

    # struct = parseStruct()
    if options.is_ini:
        struct = parseIni()
    elif lsur:
        struct = parseSur()
    elif ts:
        struct = parseTS()
    elif options.is_dft:
        struct = parseOpt('dft')
    elif options.is_popt:
        struct = parseOpt('opt', hm)
    else:
        if os.path.exists('struct.dat'):
            try:
                struct = parseStruct()
            except:
                struct = parseOpt('opt', hm)
        else:
            struct = parseOpt('opt', hm)

    # struct [0] enthalpy; [1] hardness; [2] nstruct; [3] gtype; [4] cell; [5] polar; [6] bandgap; [7] xrddiff, [8] forme=0

    structure = []

    if cl or lsur or options.is_nosym or ts:
        norefine = True
    else:
        norefine = False

    if hard:
        for x in struct:
            if x[0] < options.maxe and x[0] > options.mine and \
               x[1] < -1*options.minh and x[1] > -1*options.maxh:
                structure.append(x)
    elif hm:
        for x in struct:
            if x[0] <= options.maxe and x[0] >= options.mine and \
               x[5] <= options.maxp and x[5] >= options.minp:
                structure.append(x)
    else:
        structure = struct[:]


    if options.is_all:
        num_proce = len(structure)
    else:
        if options.num_proce < len(structure):
            num_proce = options.num_proce
        else :
            num_proce = len(structure)

    if options.mprec is None:
        prec_pool = [options.prec]
    else:
        try:
            prec_pool = list(map(float, options.mprec.split()))
        except:
            print('warning: parse multi tolerance error')
            prec_pool = [options.prec]

    avail_temps = ['300', '400', '500', '600', '700', '800', '900', '1000', '1100', '1200', '1300', '1400', '1500', '1600', '1700', '1800', '1900', '2000']
    if options.temperature_list is not None:
        temperature_list = list(map(int, options.temperature_list.split()))
        for temp in temperature_list:
            if str(temp) not in avail_temps:
                raise NotImplementedError(f"temperatures only support {avail_temps}")
    else:
        temperature_list = [300, 1800]

    if options.is_wvasp or options.is_wcif:
        is_refine = True
        is_prim = options.is_prim
        os.system('rm -rf dir_* > /dev/null 2> /dev/null')
    else:
        is_refine = False
        is_prim = False

    if options.is_plot:
        plot(struct, npop)

    for item in structure :
        if item[0] > options.maxe or item[0] < options.mine:
            item[0] = 610612509

    if vsc:
        vsckit(structure, vsce, name_ele, options, prec_pool, is_refine, is_prim, hard, cl, norefine, hm, bg, xrd)
    elif ts:
        structure.sort(key=lambda x:x[0])
        output(structure, options, num_proce, num_neb)
    else:
        if options.is_hard:
            structure.sort(key=lambda x:x[1])
        else:
            structure.sort(key=lambda x:x[0])
            print(vsce)
            for j in range(len(structure)):
                e1 = 0.
                for k in range(len(vsce)):
                    e1 += vsce[k]*structure[j][4][2][k]
                forme = (structure[j][0] * structure[j][4][3] - e1) / structure[j][4][3]
                # forme = BStruct[i][j][0]
                structure[j][8] = forme
        if hm:
            structure.sort(key=lambda x:x[5], reverse=True)
        if bg:
            structure.sort(key=lambda x:x[6])
        if xrd:
            structure.sort(key=lambda x:x[7])

        fdir = './'
        Zoutput(structure, options, num_proce, prec_pool, is_refine, is_prim, hard, fdir, d2, cl, norefine, hm, bg, xrd, lsur)



if __name__ == '__main__':
    run()
    # print gcdnum([4, 4, 32])
    # print gcdnum([4, 6])


